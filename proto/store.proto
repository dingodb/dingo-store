// Copyright (c) 2023 dingodb.com, Inc. All Rights Reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "common.proto";
import "error.proto";

package dingodb.pb.store;

option java_package = "io.dingodb.store";
option cc_generic_services = true;

message KvGetRequest {
  uint64 region_id = 1;
  bytes key = 2;
}

message KvGetResponse {
  dingodb.pb.error.Error error = 1;
  bytes value = 2;
}

message KvBatchGetRequest {
  uint64 region_id = 1;
  repeated bytes keys = 2;
}

message KvBatchGetResponse {
  dingodb.pb.error.Error error = 1;
  repeated dingodb.pb.common.KeyValue kvs = 2;
}

message KvPutRequest {
  uint64 region_id = 1;
  dingodb.pb.common.KeyValue kv = 2;
}

message KvPutResponse {
  dingodb.pb.error.Error error = 1;
}

message KvBatchPutRequest {
  uint64 region_id = 1;
  repeated dingodb.pb.common.KeyValue kvs = 2;
}

message KvBatchPutResponse {
  dingodb.pb.error.Error error = 1;
}

message KvPutIfAbsentRequest {
  uint64 region_id = 1;
  dingodb.pb.common.KeyValue kv = 2;
}

message KvPutIfAbsentResponse {
  dingodb.pb.error.Error error = 1;
  // key_state = true, update success
  // key_state = false, update failed
  bool key_state = 2;
}

message KvBatchPutIfAbsentRequest {
  uint64 region_id = 1;
  repeated dingodb.pb.common.KeyValue kvs = 2;
  bool is_atomic = 3;
}

message KvBatchPutIfAbsentResponse {
  dingodb.pb.error.Error error = 1;
  // return the execution status of each key
  // key_states[index] = true, update success
  // key_states[index] = false, update failed
  repeated bool key_states = 2;
}

message KvBatchDeleteRequest {
  uint64 region_id = 1;
  repeated bytes keys = 2;
}

message KvBatchDeleteResponse {
  dingodb.pb.error.Error error = 1;
  // return the execution status of each key
  // key_states[index] = true, delete success
  // key_states[index] = false, key not exist
  repeated bool key_states = 2;
}

message KvDeleteRangeRequest {
  uint64 region_id = 1;
  dingodb.pb.common.RangeWithOptions range = 2;
}

message KvDeleteRangeResponse {
  dingodb.pb.error.Error error = 1;
  uint64 delete_count = 2;
}

message KvCompareAndSetRequest {
  uint64 region_id = 1;
  dingodb.pb.common.KeyValue kv = 2;
  // empty means key not exist
  bytes expect_value = 3;
}

message KvCompareAndSetResponse {
  dingodb.pb.error.Error error = 1;
  // key_state = true, update success
  // key_state = false, update failed
  bool key_state = 2;
}

message KvBatchCompareAndSetRequest {
  uint64 region_id = 1;
  repeated dingodb.pb.common.KeyValue kvs = 2;
  // empty means key not exist
  repeated bytes expect_values = 3;
  bool is_atomic = 4;
}

message KvBatchCompareAndSetResponse {
  dingodb.pb.error.Error error = 1;
  // key_state = true, update success
  // key_state = false, update failed
  repeated bool key_states = 2;
}

// aggregation type
enum AggregationType {
  AGGREGATION_NONE = 0;
  SUM = 1;
  COUNT = 2;
  COUNTWITHNULL = 3;  // null is counted in count //TODO
  MAX = 4;
  MIN = 5;
  SUM0 = 6;
}

// aggregation operation
message AggregationOperator {
  // aggregation operator
  AggregationType oper = 1;

  // Specify the index column here is currently only specifying a certain column.
  // such as 0, 1 (-1 = all)
  int32 index_of_column = 2;
}

message Schema {
  enum Type {
    BOOL = 0;
    INTEGER = 1;
    FLOAT = 2;
    LONG = 3;
    DOUBLE = 4;
    STRING = 5;
    BOOLLIST = 6;
    INTEGERLIST = 7;
    FLOATLIST = 8;
    LONGLIST = 9;
    DOUBLELIST = 10 ;
    STRINGLIST = 11;
  };

  // type of data
  Type type = 1;

  // Is primary key
  bool is_key = 2;

  // is allowed to be empty
  bool is_nullable = 3;

  // index position starts from 0
  int32 index = 4;
}

message Coprocessor {
  // the version of the serialized data
  int32 schema_version = 1;

  message SchemaWrapper {
    repeated Schema schema = 1;
    int64 common_id = 2;
  }

  // original schema
  SchemaWrapper original_schema = 2;

  // return schema
  SchemaWrapper result_schema = 3;

  // Column selection in the table list selection
  // For example, [0, 2, 4, 7] selects the index subscript of the column.
  // If the length of the array is 0, it means all
  repeated int32 selection_columns = 4;

  // The operator pushes down the expression binary filter to use empty to indicate that there is no expression and no
  // filtering
  bytes expression = 5;

  // It is allowed to be empty, indicating that there is no group by. For example, group by name, age; [0, 1]
  repeated int32 group_by_columns = 6;

  // group by expression
  // The list that needs to be aggregated is allowed to be empty, that is, not aggregated sum(salary), count(age),
  // count(salary). but group_by_columns is not allowed to be empty
  repeated AggregationOperator aggregation_operators = 7;
}

message KvScanBeginRequest {
  // region id
  uint64 region_id = 1;

  // prefix start_key end_key with mode
  dingodb.pb.common.RangeWithOptions range = 2;

  // The maximum number of requests keys per request
  // limit = 0 means only scan_id is returned and no data is returned
  // If max_fetch_cnt > 0, it means to return scan_id and data. Note that in this way, the return will be slower because
  // the data needs to be prepared For example: max_fetch_cnt = 10000, which means that the maximum number of kv items
  // in this request is 10000, which is just a suggested value. If the maximum number of kv items in the server is 1000,
  // The data returned each time is only 1000 pieces of data. Note: only the maximum number of kv pairs per request
  uint64 max_fetch_cnt = 3;

  // is it just to get the key
  bool key_only = 4;

  // whether to automatically release resources
  // after reading all the data, the default is false,
  // and the default is automatically released
  bool disable_auto_release = 5;

  // Whether to enable operator pushdown, enabled by default (false: means enabled, true: means disabled)
  bool disable_coprocessor = 6;

  // coprocessor
  Coprocessor coprocessor = 7;
}

message KvScanBeginResponse {
  // error code
  dingodb.pb.error.Error error = 1;

  // uniquely identifies this scan
  bytes scan_id = 2;

  // return key value pair. if kvs.size == 0 means no data
  repeated dingodb.pb.common.KeyValue kvs = 3;
}

message KvScanContinueRequest {
  // region id
  uint64 region_id = 1;

  // uniquely identifies this scan
  bytes scan_id = 2;

  // The maximum number of requests keys per request
  // If max_fetch_cnt > 0, it means to return scan_id and data. Note that in this way, the return will be slower because
  // the data needs to be prepared For example: max_fetch_cnt = 10000, which means that the maximum number of kv items
  // in this request is 10000, which is just a suggested value. If the maximum number of kv items in the server is 1000,
  // The data returned each time is only 1000 pieces of data. Note: only the maximum number of kv pairs per request
  uint64 max_fetch_cnt = 3;
}

message KvScanContinueResponse {
  // error code
  dingodb.pb.error.Error error = 1;

  // return key value pair. if kvs.size == 0 means no data
  repeated dingodb.pb.common.KeyValue kvs = 2;
}

message KvScanReleaseRequest {
  // region id
  uint64 region_id = 1;

  // uniquely identifies this scan
  bytes scan_id = 2;
}

message KvScanReleaseResponse {
  // error code
  dingodb.pb.error.Error error = 1;
}

service StoreService {
  // kv
  rpc KvGet(KvGetRequest) returns (KvGetResponse);
  rpc KvBatchGet(KvBatchGetRequest) returns (KvBatchGetResponse);
  rpc KvPut(KvPutRequest) returns (KvPutResponse);
  rpc KvBatchPut(KvBatchPutRequest) returns (KvBatchPutResponse);
  rpc KvPutIfAbsent(KvPutIfAbsentRequest) returns (KvPutIfAbsentResponse);
  rpc KvBatchPutIfAbsent(KvBatchPutIfAbsentRequest) returns (KvBatchPutIfAbsentResponse);
  rpc KvBatchDelete(KvBatchDeleteRequest) returns (KvBatchDeleteResponse);
  rpc KvDeleteRange(KvDeleteRangeRequest) returns (KvDeleteRangeResponse);
  rpc KvCompareAndSet(KvCompareAndSetRequest) returns (KvCompareAndSetResponse);
  rpc KvBatchCompareAndSet(KvBatchCompareAndSetRequest) returns (KvBatchCompareAndSetResponse);

  rpc KvScanBegin(KvScanBeginRequest) returns (KvScanBeginResponse);
  rpc KvScanContinue(KvScanContinueRequest) returns (KvScanContinueResponse);
  rpc KvScanRelease(KvScanReleaseRequest) returns (KvScanReleaseResponse);
};
