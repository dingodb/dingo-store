// Copyright (c) 2023 dingodb.com, Inc. All Rights Reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "common.proto";
import "error.proto";
import "store_internal.proto";
import "coordinator.proto";

package dingodb.pb.store;

option java_package = "io.dingodb.store";
option cc_generic_services = true;

message AddRegionRequest {
  dingodb.pb.common.RegionDefinition region = 1;
}

message AddRegionResponse {
  dingodb.pb.error.Error error = 1;
}

message ChangeRegionRequest {
  dingodb.pb.common.RegionDefinition region = 1;
}

message ChangeRegionResponse {
  dingodb.pb.error.Error error = 1;
}

message DestroyRegionRequest {
  uint64 region_id = 1;
}

message DestroyRegionResponse {
  dingodb.pb.error.Error error = 1;
}

message SnapshotRequest {
  uint64 region_id = 1;
}

message SnapshotResponse {
  dingodb.pb.error.Error error = 1;
}

message KvGetRequest {
  uint64 region_id = 1;
  bytes key = 2;
}

message KvGetResponse {
  dingodb.pb.error.Error error = 1;
  bytes value = 2;
}

message KvBatchGetRequest {
  uint64 region_id = 1;
  repeated bytes keys = 2;
}

message KvBatchGetResponse {
  dingodb.pb.error.Error error = 1;
  repeated dingodb.pb.common.KeyValue kvs = 2;
}

message KvPutRequest {
  uint64 region_id = 1;
  dingodb.pb.common.KeyValue kv = 2;
}

message KvPutResponse {
  dingodb.pb.error.Error error = 1;
}

message KvBatchPutRequest {
  uint64 region_id = 1;
  repeated dingodb.pb.common.KeyValue kvs = 2;
}

message KvBatchPutResponse {
  dingodb.pb.error.Error error = 1;
}

message KvPutIfAbsentRequest {
  uint64 region_id = 1;
  dingodb.pb.common.KeyValue kv = 2;
}

message KvPutIfAbsentResponse {
  dingodb.pb.error.Error error = 1;
  // key_state = true, update success
  // key_state = false, update failed
  bool key_state = 2;
}

message KvBatchPutIfAbsentRequest {
  uint64 region_id = 1;
  repeated dingodb.pb.common.KeyValue kvs = 2;
  bool is_atomic = 3;
}

message KvBatchPutIfAbsentResponse {
  dingodb.pb.error.Error error = 1;
  // return the execution status of each key
  // key_states[index] = true, update success
  // key_states[index] = false, update failed
  repeated bool key_states = 2;
}

message KvBatchDeleteRequest {
  uint64 region_id = 1;
  repeated bytes keys = 2;
}

message KvBatchDeleteResponse {
  dingodb.pb.error.Error error = 1;
  // return the execution status of each key
  // key_states[index] = true, delete success
  // key_states[index] = false, key not exist
  repeated bool key_states = 2;
}

message KvDeleteRangeRequest {
  uint64 region_id = 1;
  dingodb.pb.common.RangeWithOptions range = 2;
}

message KvDeleteRangeResponse {
  dingodb.pb.error.Error error = 1;
  uint64 delete_count = 2;
}

message KvScanBeginRequest {
  // region id
  uint64 region_id = 1;

  // prefix start_key end_key with mode
  dingodb.pb.common.RangeWithOptions range = 2;

  // The maximum number of requests keys per request
  // limit = 0 means only scan_id is returned and no data is returned
  // If max_fetch_cnt > 0, it means to return scan_id and data. Note that in this way, the return will be slower because
  // the data needs to be prepared For example: max_fetch_cnt = 10000, which means that the maximum number of kv items
  // in this request is 10000, which is just a suggested value. If the maximum number of kv items in the server is 1000,
  // The data returned each time is only 1000 pieces of data. Note: only the maximum number of kv pairs per request
  uint64 max_fetch_cnt = 3;

  // is it just to get the key
  bool key_only = 4;

  // whether to automatically release resources
  // after reading all the data, the default is false,
  // and the default is automatically released
  bool disable_auto_release = 5;
}

message KvScanBeginResponse {
  // error code
  dingodb.pb.error.Error error = 1;

  // uniquely identifies this scan
  bytes scan_id = 2;

  // return key value pair. if kvs.size == 0 means no data
  repeated dingodb.pb.common.KeyValue kvs = 3;
}

message KvScanContinueRequest {
  // region id
  uint64 region_id = 1;

  // uniquely identifies this scan
  bytes scan_id = 2;

  // The maximum number of requests keys per request
  // If max_fetch_cnt > 0, it means to return scan_id and data. Note that in this way, the return will be slower because
  // the data needs to be prepared For example: max_fetch_cnt = 10000, which means that the maximum number of kv items
  // in this request is 10000, which is just a suggested value. If the maximum number of kv items in the server is 1000,
  // The data returned each time is only 1000 pieces of data. Note: only the maximum number of kv pairs per request
  uint64 max_fetch_cnt = 3;
}

message KvScanContinueResponse {
  // error code
  dingodb.pb.error.Error error = 1;

  // return key value pair. if kvs.size == 0 means no data
  repeated dingodb.pb.common.KeyValue kvs = 2;
}

message KvScanReleaseRequest {
  // region id
  uint64 region_id = 1;

  // uniquely identifies this scan
  bytes scan_id = 2;
}

message KvScanReleaseResponse {
  // error code
  dingodb.pb.error.Error error = 1;
}

enum DebugType {
  NONE = 0;
  STORE_REGION_META_STAT = 1;
  STORE_REGION_META_DETAILS = 2;
  STORE_REGION_CONTROL_COMMAND = 3;
  STORE_RAFT_META = 4;
  STORE_REGION_EXECUTOR = 5;
}

message DebugRequest {
  DebugType type = 1;  // debug type
  repeated uint64 region_ids = 2;
}

message DebugResponse {
  message RegionMetaStat {
    map<string, int32> state_counts = 1;
  }

  message RegionMetaDetails {
    repeated dingodb.pb.store_internal.Region regions = 1;
  }

  message RegionControlCommand {
    repeated dingodb.pb.coordinator.RegionCmd region_cmds = 1;
  }

  message RaftMeta {
    repeated dingodb.pb.store_internal.RaftMeta raft_metas = 1;
  }

  message RegionExecutor {
    repeated uint64 region_ids = 1;
  }

  RegionMetaStat region_meta_stat = 1;
  RegionMetaDetails region_meta_details = 2;
  RegionControlCommand region_control_command = 3;
  RaftMeta raft_meta = 4;
  RegionExecutor region_executor = 5;
}

service StoreService {
  // region
  rpc AddRegion(AddRegionRequest) returns (AddRegionResponse);
  rpc ChangeRegion(ChangeRegionRequest) returns (ChangeRegionResponse);
  rpc DestroyRegion(DestroyRegionRequest) returns (DestroyRegionResponse);
  rpc Snapshot(SnapshotRequest) returns (SnapshotResponse);

  // kv
  rpc KvGet(KvGetRequest) returns (KvGetResponse);
  rpc KvBatchGet(KvBatchGetRequest) returns (KvBatchGetResponse);
  rpc KvPut(KvPutRequest) returns (KvPutResponse);
  rpc KvBatchPut(KvBatchPutRequest) returns (KvBatchPutResponse);
  rpc KvPutIfAbsent(KvPutIfAbsentRequest) returns (KvPutIfAbsentResponse);
  rpc KvBatchPutIfAbsent(KvBatchPutIfAbsentRequest) returns (KvBatchPutIfAbsentResponse);
  rpc KvBatchDelete(KvBatchDeleteRequest) returns (KvBatchDeleteResponse);
  rpc KvDeleteRange(KvDeleteRangeRequest) returns (KvDeleteRangeResponse);

  rpc KvScanBegin(KvScanBeginRequest) returns (KvScanBeginResponse);
  rpc KvScanContinue(KvScanContinueRequest) returns (KvScanContinueResponse);
  rpc KvScanRelease(KvScanReleaseRequest) returns (KvScanReleaseResponse);

  // debug
  rpc Debug(DebugRequest) returns (DebugResponse);
};
