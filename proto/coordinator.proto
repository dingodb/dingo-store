// Copyright (c) 2023 dingodb.com, Inc. All Rights Reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "common.proto";
import "error.proto";

package dingodb.pb.coordinator;

option java_package = "io.dingodb.coordinator";
option cc_generic_services = true;

enum TaskPreCheckType {
  NONE = 0;  // this is a placeholder
  REGION_CHECK = 1;
  STORE_REGION_CHECK = 2;
}

message RegionCheck {
  int64 region_id = 1;
  dingodb.pb.common.Range range = 2;
  dingodb.pb.common.RegionState state = 3;
  dingodb.pb.common.RegionRaftStatus raft_status = 4;
  dingodb.pb.common.ReplicaStatus replica_status = 5;
  repeated dingodb.pb.common.Peer peers = 6;
}

message StoreRegionCheck {
  int64 store_id = 1;
  int64 region_id = 2;
  dingodb.pb.common.Range range = 3;
  dingodb.pb.common.StoreRegionState store_region_state = 4;
  dingodb.pb.common.RaftNodeState raft_node_status = 5;
  repeated dingodb.pb.common.Peer peers = 6;

  // check vector index
  // if check_vector_index is true, check vector index status equal to is_hold_vector_index
  // else ignore vector index status
  bool check_vector_index_is_hold = 7;
  bool is_hold_vector_index = 8;
  bool check_vector_index_is_ready = 9;
  bool is_ready = 10;
}

message TaskPreCheck {
  TaskPreCheckType type = 1;
  oneof PreCheck {
    RegionCheck region_check = 2;
    StoreRegionCheck store_region_check = 3;
  }
}

message Task {
  TaskPreCheck pre_check = 1;
  repeated StoreOperation store_operations = 2;
}

message TaskList {
  int64 id = 1;         // this is the id of coordinator task list
  int64 next_step = 2;  // the next index of tasks to execute
  repeated Task tasks = 3;
}

message CreateRequest {
  dingodb.pb.common.RegionDefinition region_definition = 1;  // region definition
  int64 split_from_region_id = 2;  // this is a sub-region, its state need to be STANDBY, will split from region id, if
                                   // this value is 0, means this is a normal new region
}

message DeleteRequest {
  int64 region_id = 1;  // region id to be deleted
}

message SplitRequest {
  int64 split_from_region_id = 1;  // split from region id
  int64 split_to_region_id = 2;    // split to region id
  bytes split_watershed_key = 3;   // split watershed key
  bool store_create_region = 4;    // if true, store will create region, else coordinator pre-create region
}

message MergeRequest {
  int64 merge_from_region_id = 1;  // merge from region id
  int64 merge_to_region_id = 2;    // merge to region id
}

message ChangePeerRequest {
  dingodb.pb.common.RegionDefinition region_definition = 1;  // region definition contains new peer
}

message TransferLeaderRequest {
  dingodb.pb.common.Peer peer = 1;  // transfer leadership to the peer
}

message SnapshotVectorIndexRequest {
  int64 vector_index_id = 1;  // vector index id
}

message UpdateDefinitionRequest {
  dingodb.pb.common.RegionDefinition new_region_definition = 1;  // new region definition
}

message PurgeRequest {
  int64 region_id = 1;  // region id to be purged
}

message SwitchSplitRequest {
  int64 region_id = 1;
  bool disable_split = 2;  // false: enable split true: disable split.
}

message HoldVectorIndexRequest {
  int64 region_id = 1;
  bool is_hold = 2;
}

message StopRequest {
  int64 region_id = 1;  // region id to be stop
}

message DestroyExecutorRequest {
  int64 region_id = 1;
}

// RegionCmdType
enum RegionCmdType {
  CMD_NONE = 0;                   // this is a placeholder
  CMD_CREATE = 1;                 // create region
  CMD_DELETE = 2;                 // delete region
  CMD_SPLIT = 3;                  // split region
  CMD_MERGE = 4;                  // merge region
  CMD_CHANGE_PEER = 5;            // change peer for region raft group
  CMD_TRANSFER_LEADER = 6;        // transfer leader for region raft group
  CMD_SNAPSHOT = 7;               // save region snapshot
  CMD_PURGE = 8;                  // purge region's meta for deleted region
  CMD_SNAPSHOT_VECTOR_INDEX = 9;  // save vector index snapshot
  CMD_UPDATE_DEFINITION = 10;     // update definition, now only support hnsw index change max_elements
  CMD_SWITCH_SPLIT = 11;          // switch region enable/disable split.
  CMD_HOLD_VECTOR_INDEX = 12;     // control follower hold vector index

  CMD_STOP = 30;              // when region state ORPHAN, stop region
  CMD_DESTROY_EXECUTOR = 31;  // destroy region executor
}

// Region cmd status
enum RegionCmdStatus {
  STATUS_NONE = 0;
  STATUS_DONE = 1;
  STATUS_FAIL = 2;
}

// RegionCmd
message RegionCmd {
  int64 id = 1;                       // this is a global nonrepetitive ID for cmd
  int64 region_id = 2;                // this is region id
  RegionCmdType region_cmd_type = 3;  // the cmd want to be executed
  int64 create_timestamp = 4;         // the timestamp when this cmd is created
  oneof Request {
    CreateRequest create_request = 11;           // create parameters
    DeleteRequest delete_request = 12;           // delete parameters
    SplitRequest split_request = 13;             // split parameters
    MergeRequest merge_request = 14;             // merge parameters
    ChangePeerRequest change_peer_request = 15;  // change peer parameters
    PurgeRequest purge_request = 16;  // purge region meta on store, this region is deleted and already purge on
    TransferLeaderRequest transfer_leader_request = 17;  // change peer parameters

    SnapshotVectorIndexRequest snapshot_vector_index_request = 18;  // save vector index snapshot
    UpdateDefinitionRequest update_definition_request = 19;         // update region definition
    SwitchSplitRequest switch_split_request = 20;                   // switch region split
    HoldVectorIndexRequest hold_vector_index_request = 21;          // follower hold vector index

    StopRequest stop_request = 30;                         // when region state ORPHAN, stop region
    DestroyExecutorRequest destroy_executor_request = 31;  // destroy region executor
  }

  bool is_notify = 40;          // store need to notify coordinator when this cmd is done
  RegionCmdStatus status = 50;  // the status of this cmd
}

// StoreOperation
message StoreOperation {
  int64 id = 1;  // this is store id
  repeated RegionCmd region_cmds = 2;
}

// Store report self status and region (this node is leader) status
message StoreHeartbeatRequest {
  int64 self_storemap_epoch = 1;                     // storemap epoch in this Store
  dingodb.pb.common.Store store = 2;                 // self store info
  dingodb.pb.common.StoreMetrics store_metrics = 3;  // self store metrics
}

// StoreHeartbeatResponse
message StoreHeartbeatResponse {
  dingodb.pb.error.Error error = 1;
  int64 storemap_epoch = 2;                 // the lates epoch of storemap
  dingodb.pb.common.StoreMap storemap = 3;  // new storemap
  ClusterState cluster_state = 4;           // cluster state, ag. cluster is read only
}

message ExecutorHeartbeatRequest {
  int64 self_executormap_epoch = 1;         // executormap epoch in this Executor
  dingodb.pb.common.Executor executor = 2;  // self executor info
}

message ExecutorHeartbeatResponse {
  dingodb.pb.error.Error error = 1;
  int64 executormap_epoch = 2;                    // the lates epoch of executormap
  dingodb.pb.common.ExecutorMap executormap = 3;  // new executormap
}

message CoordinatorMemoryInfo {
  int64 applied_term = 1;
  int64 applied_index = 2;

  int64 total_size = 3;

  int64 id_epoch_safe_map_temp_count = 4;
  int64 id_epoch_safe_map_temp_size = 5;

  int64 id_epoch_map_count = 6;
  int64 id_epoch_map_size = 7;

  int64 coordinator_map_count = 8;
  int64 coordinator_map_size = 9;

  int64 store_map_count = 10;
  int64 store_map_size = 11;

  int64 store_need_push_count = 12;
  int64 store_need_push_size = 13;

  int64 executor_map_count = 14;
  int64 executor_map_size = 15;

  int64 executor_need_push_count = 16;
  int64 executor_need_push_size = 17;

  int64 schema_map_count = 18;
  int64 schema_map_size = 19;

  int64 region_map_count = 20;
  int64 region_map_size = 21;

  int64 table_map_count = 22;
  int64 table_map_size = 23;

  int64 store_metrics_map_count = 24;
  int64 store_metrics_map_size = 25;

  int64 table_metrics_map_count = 26;
  int64 table_metrics_map_size = 27;

  int64 store_operation_map_count = 28;
  int64 store_operation_map_size = 29;

  int64 region_cmd_map_count = 30;
  int64 region_cmd_map_size = 31;

  int64 executor_user_map_count = 32;
  int64 executor_user_map_size = 33;

  int64 task_list_map_count = 34;
  int64 task_list_map_size = 35;

  int64 index_map_count = 36;
  int64 index_map_size = 37;

  int64 index_metrics_map_count = 38;
  int64 index_metrics_map_size = 39;

  int64 kv_index_map_count = 40;
  int64 kv_index_map_size = 41;

  int64 kv_rev_map_count = 42;
  int64 kv_rev_map_size = 43;

  int64 region_metrics_map_count = 44;
  int64 region_metrics_map_size = 45;

  int64 deleted_region_map_count = 46;
  int64 deleted_region_map_size = 47;

  int64 deleted_table_map_count = 48;
  int64 deleted_table_map_size = 49;

  int64 deleted_index_map_count = 50;
  int64 deleted_index_map_size = 51;

  uint64 range_region_map_count = 52;
  uint64 range_region_map_size = 53;

  repeated dingodb.pb.common.KeyValue id_epoch_values = 100;
}

message HelloRequest {
  int64 hello = 1;
  bool get_memory_info = 2;
}

message ClusterState {
  bool cluster_is_read_only = 1;
}

message HelloResponse {
  dingodb.pb.error.Error error = 1;
  dingodb.pb.common.CoordinatorState state = 2;
  string status_detail = 3;
  CoordinatorMemoryInfo memory_info = 4;
  ClusterState cluster_state = 5;
}

message GetRegionMapRequest {
  int64 epoch = 1;
}

message GetRegionMapResponse {
  dingodb.pb.error.Error error = 1;
  int64 epoch = 2;
  dingodb.pb.common.RegionMap regionmap = 3;
}

message GetDeletedRegionMapRequest {
  int64 epoch = 1;
}

message GetDeletedRegionMapResponse {
  dingodb.pb.error.Error error = 1;
  int64 epoch = 2;
  dingodb.pb.common.RegionMap regionmap = 3;
}

message AddDeletedRegionMapRequest {
  int64 region_id = 1;
  bool force = 2;
}

message AddDeletedRegionMapResponse {
  dingodb.pb.error.Error error = 1;
}

message CleanDeletedRegionMapRequest {
  int64 region_id = 1;
}

message CleanDeletedRegionMapResponse {
  dingodb.pb.error.Error error = 1;
}

message GetRegionCountRequest {
  int64 epoch = 1;
}

message GetRegionCountResponse {
  dingodb.pb.error.Error error = 1;
  int64 region_count = 2;
}

message GetStoreMapRequest {
  int64 epoch = 1;
}

message GetStoreMapResponse {
  dingodb.pb.error.Error error = 1;
  int64 epoch = 2;
  dingodb.pb.common.StoreMap storemap = 3;
}

message GetStoreMetricsRequest {
  int64 epoch = 1;
  int64 store_id = 2;
  int64 region_id = 3;
}

message GetStoreMetricsResponse {
  dingodb.pb.error.Error error = 1;
  int64 epoch = 2;
  repeated dingodb.pb.common.StoreMetrics store_metrics = 3;
}

message DeleteStoreMetricsRequest {
  int64 store_id = 1;
}

message DeleteStoreMetricsResponse {
  dingodb.pb.error.Error error = 1;
}

message GetRegionMetricsRequest {
  int64 region_id = 1;
}

message GetRegionMetricsResponse {
  dingodb.pb.error.Error error = 1;
  repeated dingodb.pb.common.RegionMetrics region_metrics = 3;
}

message DeleteRegionMetricsRequest {
  int64 region_id = 1;
}

message DeleteRegionMetricsResponse {
  dingodb.pb.error.Error error = 1;
}

message GetStoreOperationRequest {
  int64 store_id = 1;  // this is store_id, if 0, means get all store operation
}

message GetStoreOperationResponse {
  dingodb.pb.error.Error error = 1;
  repeated StoreOperation store_operations = 2;
}

message CreateStoreRequest {
  int64 cluster_id = 1;
}

message CreateStoreResponse {
  dingodb.pb.error.Error error = 1;
  int64 store_id = 2;
  string keyring = 3;
}

message GetCoordinatorMapRequest {
  int64 cluster_id = 1;
}

message GetCoordinatorMapResponse {
  dingodb.pb.error.Error error = 1;
  int64 epoch = 2;
  dingodb.pb.common.Location leader_location = 3;
  repeated dingodb.pb.common.Location coordinator_locations = 4;
  dingodb.pb.common.Location auto_increment_leader_location = 5;
  dingodb.pb.common.Location tso_leader_location = 6;
}

message CreateRegionIdRequest {
  int64 cluster_id = 1;  // not used now, just a place holder for future
  uint32 count = 2;      // the count of region-id to create
}

message CreateRegionIdResponse {
  dingodb.pb.error.Error error = 1;
  repeated int64 region_ids = 2;
}

message DeleteStoreRequest {
  int64 cluster_id = 1;
  int64 store_id = 2;
  string keyring = 3;
}

message DeleteStoreResponse {
  dingodb.pb.error.Error error = 1;
}

message UpdateStoreRequest {
  int64 cluster_id = 1;
  int64 store_id = 2;
  string keyring = 3;
  dingodb.pb.common.StoreInState store_in_state = 4;
}

message UpdateStoreResponse {
  dingodb.pb.error.Error error = 1;
}

message CreateExecutorRequest {
  int64 cluster_id = 1;
  dingodb.pb.common.Executor executor = 2;
}

message CreateExecutorResponse {
  dingodb.pb.error.Error error = 1;
  dingodb.pb.common.Executor executor = 2;
}

message DeleteExecutorRequest {
  int64 cluster_id = 1;
  dingodb.pb.common.Executor executor = 2;
}

message DeleteExecutorResponse {
  dingodb.pb.error.Error error = 1;
}

message CreateExecutorUserRequest {
  int64 cluster_id = 1;  // set to 0 now
  dingodb.pb.common.ExecutorUser executor_user = 2;
}

message CreateExecutorUserResponse {
  dingodb.pb.error.Error error = 1;
  dingodb.pb.common.ExecutorUser executor_user = 2;
}

message DeleteExecutorUserRequest {
  int64 cluster_id = 1;  // set to 0 now
  dingodb.pb.common.ExecutorUser executor_user = 2;
}

message DeleteExecutorUserResponse {
  dingodb.pb.error.Error error = 1;
}

message UpdateExecutorUserRequest {
  int64 cluster_id = 1;  // set to 0 now
  dingodb.pb.common.ExecutorUser executor_user = 2;
  dingodb.pb.common.ExecutorUser executor_user_update = 3;  // user name is ignored, only update keyring
}

message UpdateExecutorUserResponse {
  dingodb.pb.error.Error error = 1;
  dingodb.pb.common.ExecutorUser executor_user = 2;
}

message GetExecutorMapRequest {
  int64 epoch = 1;
}

message GetExecutorMapResponse {
  dingodb.pb.error.Error error = 1;
  int64 epoch = 2;
  dingodb.pb.common.ExecutorMap executormap = 3;
}

message GetExecutorUserMapRequest {
  int64 cluster_id = 1;  // set to 0 now
  int64 epoch = 2;       // set to 0 now
}

message GetExecutorUserMapResponse {
  dingodb.pb.error.Error error = 1;
  int64 epoch = 2;
  dingodb.pb.common.ExecutorUserMap executor_user_map = 3;
}

message CleanStoreOperationRequest {
  int64 store_id = 1;
}

message CleanStoreOperationResponse {
  dingodb.pb.error.Error error = 1;
}

message AddStoreOperationRequest {
  StoreOperation store_operation = 1;
}

message AddStoreOperationResponse {
  dingodb.pb.error.Error error = 1;
}

message RemoveStoreOperationRequest {
  int64 store_id = 1;
  int64 region_cmd_id = 2;
}

message RemoveStoreOperationResponse {
  dingodb.pb.error.Error error = 1;
}

message GetRegionCmdRequest {
  int64 store_id = 1;
  int64 start_region_cmd_id = 2;
  int64 end_region_cmd_id = 3;
}

message GetRegionCmdResponse {
  dingodb.pb.error.Error error = 1;
  repeated RegionCmd region_cmds = 2;
  repeated dingodb.pb.error.Error region_cmd_errors = 3;
}

message GetTaskListRequest {
  int64 cluster_id = 1;
}

message GetTaskListResponse {
  dingodb.pb.error.Error error = 1;
  repeated TaskList task_lists = 2;
}

message CleanTaskListRequest {
  int64 task_list_id = 1;
}

message CleanTaskListResponse {
  dingodb.pb.error.Error error = 1;
}

message QueryRegionRequest {
  int64 region_id = 1;
}

message QueryRegionResponse {
  dingodb.pb.error.Error error = 1;
  dingodb.pb.common.Region region = 2;
}

message CreateRegionRequest {
  string region_name = 1;
  string resource_tag = 2;
  int64 replica_num = 3;
  dingodb.pb.common.Range range = 4;
  int64 schema_id = 11;  // optional
  int64 table_id = 12;   // optional
  int64 index_id = 13;   // optional, if region_type is INDEX, this field is required
  int64 part_id = 14;    // optional, if region_type is INDEX, this field is required

  repeated int64 store_ids = 20;  // optional if not set, will create choose from all stores

  int64 split_from_region_id = 25;  // optional, if set, will split from this region

  dingodb.pb.common.RegionType region_type =
      30;  // optional, if set, will create a region with this type, this type is default STORE
  dingodb.pb.common.IndexParameter index_parameter = 40;  // optional, if region_type is INDEX, this field is required
}

message CreateRegionResponse {
  dingodb.pb.error.Error error = 1;
  int64 region_id = 2;
}

message DropRegionRequest {
  int64 region_id = 1;
}

message DropRegionResponse {
  dingodb.pb.error.Error error = 1;
}

message DropRegionPermanentlyRequest {
  int64 cluster_id = 1;
  int64 region_id = 2;
}

message DropRegionPermanentlyResponse {
  dingodb.pb.error.Error error = 1;
}

message SplitRegionRequest {
  SplitRequest split_request = 1;
}

message SplitRegionResponse {
  dingodb.pb.error.Error error = 1;
}

message MergeRegionRequest {
  MergeRequest merge_request = 1;
}

message MergeRegionResponse {
  dingodb.pb.error.Error error = 1;
}

message ChangePeerRegionRequest {
  ChangePeerRequest change_peer_request = 1;
}

message ChangePeerRegionResponse {
  dingodb.pb.error.Error error = 1;
}

message TransferLeaderRegionRequest {
  int64 region_id = 1;
  int64 leader_store_id = 2;
}

message TransferLeaderRegionResponse {
  dingodb.pb.error.Error error = 1;
}

message GetOrphanRegionRequest {
  int64 cluster_id = 1;
  int64 store_id = 2;
}

message GetOrphanRegionResponse {
  dingodb.pb.error.Error error = 1;
  map<int64, dingodb.pb.common.RegionMetrics> orphan_regions = 2;
}

message ScanRegionsRequest {
  // key is the first key for the range. If range_end is not given, the request only looks up key.
  bytes key = 1;
  // range_end is the upper bound on the requested range [key, range_end).
  // If range_end is '\0', the range is all keys >= key.
  // If range_end is key plus one (e.g., "aa"+1 == "ab", "a\xff"+1 == "b"),
  // then the range request gets all keys prefixed with key.
  // If both key and range_end are '\0', then the range request returns all keys.
  bytes range_end = 2;
  // limit is a limit on the number of keys returned for the request. When limit is set to 0,
  // it is treated as no limit.
  int64 limit = 3;
}

message RegionStatus {
  // RegionState
  // REGION_NEW: the region is creating, wait for store to finish the creation
  // REGION_NORMAL: the region is normal and can serve all request
  // other status refer to common.proto
  dingodb.pb.common.RegionState state = 1;
  // RegionRaftStatus
  // this status describe the data constistency of the raft region
  dingodb.pb.common.RegionRaftStatus raft_status = 2;
  // ReplicaStatus
  // this status describe the data safety of the raft region
  // if this region is degraded, it means one or more replica is down
  dingodb.pb.common.ReplicaStatus replica_status = 3;
  // RegionHeartbeatState
  // REGION_ONLINE: the leader of this region is online
  // REGION_DOWN: the leader of this region cannot heartbeat to coordinator
  dingodb.pb.common.RegionHeartbeatState heartbeat_state = 4;
  // RegionType
  // describe this region is a store region or index region
  // for table, the region is store
  // for index, the region is index (including vector index and scalar index)
  dingodb.pb.common.RegionType region_type = 5;
  // the create timestamp in ms of region
  uint64 create_timestamp = 10;
  // the last update(heartbeat) timestamp in ms of region
  uint64 last_update_timestamp = 11;
}

message ScanRegionInfo {
  // this is really region id, its parent entity is part_id
  uint64 region_id = 1;
  // the range of this part
  dingodb.pb.common.Range range = 2;
  // the leader's store location
  dingodb.pb.common.Location leader = 3;
  // all members of the region that have right to vote, this field is
  // equal to the old replicates field of Part.
  repeated dingodb.pb.common.Location voters = 4;
  // all members of the region that is learners, have no right to vote
  repeated dingodb.pb.common.Location learners = 5;
  // region_epoch is used to check whether the region info is stale
  dingodb.pb.common.RegionEpoch region_epoch = 6;
  // RegionStatus
  RegionStatus status = 7;
}

message ScanRegionsResponse {
  dingodb.pb.error.Error error = 1;
  repeated ScanRegionInfo regions = 2;
}

enum RaftControlOp {
  None = 0;            // just a placeholder
  AddPeer = 1;         // only to leader
  RemovePeer = 2;      // only to leader
  ResetPeer = 3;       // only to leader
  TransferLeader = 4;  // only to leader
  Snapshot = 5;        // to leader and follower
  GetLeader = 6;       // get leader
  ShutDown = 7;        // leader and follower both can do, only shutdown not remove from raft group
  Vote = 8;            // call node vote
  ResetVoteTime = 9;   // call reset reset_election_timeout_ms
};

enum RaftControlNodeIndex {
  CoordinatorNodeIndex = 0;
  AutoIncrementNodeIndex = 1;
};

message RaftControlRequest {
  RaftControlOp op_type = 1;
  RaftControlNodeIndex node_index = 2;
  string new_leader = 3;
  string add_peer = 4;     // the peer to add
  string remove_peer = 5;  // the peer to remove
  repeated string old_peers = 6;
  repeated string new_peers = 7;
  int64 election_time = 8;
  bool force = 9;
};

message RaftControlResponse {
  dingodb.pb.error.Error error = 1;
  string leader = 2;
};

service CoordinatorService {
  // Hello
  rpc Hello(HelloRequest) returns (HelloResponse);

  // Store
  rpc StoreHeartbeat(StoreHeartbeatRequest) returns (StoreHeartbeatResponse);
  rpc GetRegionMap(GetRegionMapRequest) returns (GetRegionMapResponse);
  rpc GetDeletedRegionMap(GetDeletedRegionMapRequest) returns (GetDeletedRegionMapResponse);
  rpc AddDeletedRegionMap(AddDeletedRegionMapRequest) returns (AddDeletedRegionMapResponse);
  rpc CleanDeletedRegionMap(CleanDeletedRegionMapRequest) returns (CleanDeletedRegionMapResponse);
  rpc GetRegionCount(GetRegionCountRequest) returns (GetRegionCountResponse);
  rpc GetStoreMap(GetStoreMapRequest) returns (GetStoreMapResponse);
  rpc GetStoreMetrics(GetStoreMetricsRequest) returns (GetStoreMetricsResponse);
  rpc DeleteStoreMetrics(DeleteStoreMetricsRequest) returns (DeleteStoreMetricsResponse);
  rpc GetRegionMetrics(GetRegionMetricsRequest) returns (GetRegionMetricsResponse);
  rpc DeleteRegionMetrics(DeleteRegionMetricsRequest) returns (DeleteRegionMetricsResponse);

  rpc CreateStore(CreateStoreRequest) returns (CreateStoreResponse);
  rpc DeleteStore(DeleteStoreRequest) returns (DeleteStoreResponse);
  rpc UpdateStore(UpdateStoreRequest) returns (UpdateStoreResponse);

  // Executor
  rpc ExecutorHeartbeat(ExecutorHeartbeatRequest) returns (ExecutorHeartbeatResponse);
  rpc CreateExecutor(CreateExecutorRequest) returns (CreateExecutorResponse);
  rpc DeleteExecutor(DeleteExecutorRequest) returns (DeleteExecutorResponse);
  rpc GetExecutorMap(GetExecutorMapRequest) returns (GetExecutorMapResponse);
  rpc CreateExecutorUser(CreateExecutorUserRequest) returns (CreateExecutorUserResponse);
  rpc DeleteExecutorUser(DeleteExecutorUserRequest) returns (DeleteExecutorUserResponse);
  rpc UpdateExecutorUser(UpdateExecutorUserRequest) returns (UpdateExecutorUserResponse);
  rpc GetExecutorUserMap(GetExecutorUserMapRequest) returns (GetExecutorUserMapResponse);

  // Coordinator
  rpc GetCoordinatorMap(GetCoordinatorMapRequest) returns (GetCoordinatorMapResponse);
  rpc CreateRegionId(CreateRegionIdRequest) returns (CreateRegionIdResponse);

  // Region
  rpc QueryRegion(QueryRegionRequest) returns (QueryRegionResponse);
  rpc CreateRegion(CreateRegionRequest) returns (CreateRegionResponse);
  rpc DropRegion(DropRegionRequest) returns (DropRegionResponse);
  rpc DropRegionPermanently(DropRegionPermanentlyRequest) returns (DropRegionPermanentlyResponse);
  rpc SplitRegion(SplitRegionRequest) returns (SplitRegionResponse);
  rpc MergeRegion(MergeRegionRequest) returns (MergeRegionResponse);
  rpc ChangePeerRegion(ChangePeerRegionRequest) returns (ChangePeerRegionResponse);
  rpc TransferLeaderRegion(TransferLeaderRegionRequest) returns (TransferLeaderRegionResponse);
  rpc GetOrphanRegion(GetOrphanRegionRequest) returns (GetOrphanRegionResponse);
  rpc ScanRegions(ScanRegionsRequest) returns (ScanRegionsResponse);

  // StoreOperation
  rpc GetStoreOperation(GetStoreOperationRequest) returns (GetStoreOperationResponse);
  rpc CleanStoreOperation(CleanStoreOperationRequest) returns (CleanStoreOperationResponse);
  rpc AddStoreOperation(AddStoreOperationRequest) returns (AddStoreOperationResponse);
  rpc RemoveStoreOperation(RemoveStoreOperationRequest) returns (RemoveStoreOperationResponse);
  rpc GetRegionCmd(GetRegionCmdRequest) returns (GetRegionCmdResponse);

  // TaskList
  rpc GetTaskList(GetTaskListRequest) returns (GetTaskListResponse);
  rpc CleanTaskList(CleanTaskListRequest) returns (CleanTaskListResponse);

  // RaftControl
  rpc RaftControl(RaftControlRequest) returns (RaftControlResponse);
}
