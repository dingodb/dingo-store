// Copyright (c) 2023 dingodb.com, Inc. All Rights Reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "common.proto";
import "error.proto";

package dingodb.pb.coordinator;

option java_package = "io.dingodb.coordinator";
option cc_generic_services = true;

// Store report self status and region (this node is leader) status
message StoreHeartbeatRequest {
  uint64 self_storemap_epoch = 1;                    // storemap epoch in this Store
  uint64 self_regionmap_epoch = 2;                   // regionmap epoch in this Store
  dingodb.pb.common.Store store = 3;                 // self store info
  repeated dingodb.pb.common.Region regions = 4;     // self region info
  dingodb.pb.common.StoreMetrics store_metrics = 5;  // self store metrics
}

message StoreHeartbeatResponse {
  dingodb.pb.error.Error error = 1;
  uint64 storemap_epoch = 2;                  // the lates epoch of storemap
  uint64 regionmap_epoch = 3;                 // the lates epoch of regionmap
  dingodb.pb.common.StoreMap storemap = 4;    // new storemap
  dingodb.pb.common.RegionMap regionmap = 5;  // new regionmap
}

message ExecutorHeartbeatRequest {
  uint64 self_executormap_epoch = 1;        // executormap epoch in this Executor
  dingodb.pb.common.Executor executor = 2;  // self executor info
}

message ExecutorHeartbeatResponse {
  dingodb.pb.error.Error error = 1;
  uint64 executormap_epoch = 2;                   // the lates epoch of executormap
  dingodb.pb.common.ExecutorMap executormap = 3;  // new executormap
}

message CoordinatorMemoryInfo {
  uint64 total_size = 1;

  uint64 id_epoch_map_temp_count = 2;
  uint64 id_epoch_map_temp_size = 3;

  uint64 id_epoch_map_count = 4;
  uint64 id_epoch_map_size = 5;

  uint64 coordinator_map_count = 6;
  uint64 coordinator_map_size = 7;

  uint64 store_map_count = 8;
  uint64 store_map_size = 9;

  uint64 store_need_push_count = 10;
  uint64 store_need_push_size = 11;

  uint64 executor_map_count = 12;
  uint64 executor_map_size = 13;

  uint64 executor_need_push_count = 14;
  uint64 executor_need_push_size = 15;

  uint64 schema_map_count = 16;
  uint64 schema_map_size = 17;

  uint64 region_map_count = 18;
  uint64 region_map_size = 19;

  uint64 table_map_count = 20;
  uint64 table_map_size = 21;

  uint64 store_metrics_map_count = 22;
  uint64 store_metrics_map_size = 23;

  uint64 table_metrics_map_count = 24;
  uint64 table_metrics_map_size = 25;
}

message HelloRequest {
  uint64 hello = 1;
  bool get_memory_info = 2;
}

message HelloResponse {
  dingodb.pb.error.Error error = 1;
  dingodb.pb.common.CoordinatorState state = 2;
  string status_detail = 3;
  CoordinatorMemoryInfo memory_info = 4;
}

message GetRegionMapRequest {
  uint64 epoch = 1;
}

message GetRegionMapResponse {
  dingodb.pb.error.Error error = 1;
  uint64 epoch = 2;
  dingodb.pb.common.RegionMap regionmap = 3;
}

message GetStoreMapRequest {
  uint64 epoch = 1;
}

message GetStoreMapResponse {
  dingodb.pb.error.Error error = 1;
  uint64 epoch = 2;
  dingodb.pb.common.StoreMap storemap = 3;
}

message GetStoreMetricsRequest {
  uint64 epoch = 1;
}

message GetStoreMetricsResponse {
  dingodb.pb.error.Error error = 1;
  uint64 epoch = 2;
  repeated dingodb.pb.common.StoreMetrics store_metrics = 3;
}

message CreateStoreRequest {
  uint64 cluster_id = 1;
}

message CreateStoreResponse {
  dingodb.pb.error.Error error = 1;
  uint64 store_id = 2;
  string keyring = 3;
}

message GetCoordinatorMapRequest {
  uint64 cluster_id = 1;
}

message GetCoordinatorMapResponse {
  uint64 epoch = 1;
  dingodb.pb.common.Location leader_location = 2;
  repeated dingodb.pb.common.Location coordinator_locations = 3;
}

message DeleteStoreRequest {
  uint64 cluster_id = 1;
  uint64 store_id = 2;
  string keyring = 3;
}

message DeleteStoreResponse {
  dingodb.pb.error.Error error = 1;
}

message CreateExecutorRequest {
  uint64 cluster_id = 1;
}

message CreateExecutorResponse {
  dingodb.pb.error.Error error = 1;
  uint64 executor_id = 2;
  string keyring = 3;
}

message DeleteExecutorRequest {
  uint64 cluster_id = 1;
  uint64 executor_id = 2;
  string keyring = 3;
}

message DeleteExecutorResponse {
  dingodb.pb.error.Error error = 1;
}

message GetExecutorMapRequest {
  uint64 epoch = 1;
}

message GetExecutorMapResponse {
  dingodb.pb.error.Error error = 1;
  uint64 epoch = 2;
  dingodb.pb.common.ExecutorMap executormap = 3;
}

service CoordinatorService {
  // Hello
  rpc Hello(HelloRequest) returns (HelloResponse);

  // Store
  rpc StoreHeartbeat(StoreHeartbeatRequest) returns (StoreHeartbeatResponse);
  rpc GetRegionMap(GetRegionMapRequest) returns (GetRegionMapResponse);
  rpc GetStoreMap(GetStoreMapRequest) returns (GetStoreMapResponse);
  rpc GetStoreMetrics(GetStoreMetricsRequest) returns (GetStoreMetricsResponse);

  rpc CreateStore(CreateStoreRequest) returns (CreateStoreResponse);
  rpc DeleteStore(DeleteStoreRequest) returns (DeleteStoreResponse);

  // Executor
  rpc ExecutorHeartbeat(ExecutorHeartbeatRequest) returns (ExecutorHeartbeatResponse);
  rpc CreateExecutor(CreateExecutorRequest) returns (CreateExecutorResponse);
  rpc DeleteExecutor(DeleteExecutorRequest) returns (DeleteExecutorResponse);
  rpc GetExecutorMap(GetExecutorMapRequest) returns (GetExecutorMapResponse);

  // Coordinator
  rpc GetCoordinatorMap(GetCoordinatorMapRequest) returns (GetCoordinatorMapResponse);
}
