// Copyright (c) 2023 dingodb.com, Inc. All Rights Reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "common.proto";
import "error.proto";

package dingodb.pb.coordinator;

option java_package = "io.dingodb.coordinator";
option cc_generic_services = true;

message CreateRequest {
  dingodb.pb.common.RegionDefinition region_definition = 1;  // region definition
}

message DeleteRequest {
  uint64 region_id = 1;  // region id to be deleted
}

message SplitRequest {
  uint64 split_from_region_id = 1;  // split from region id
  uint64 split_to_region_id = 2;    // split to region id
  bytes split_watershed_key = 3;    // split watershed key
}

message MergeRequest {
  uint64 merge_from_region_id = 1;  // merge from region id
  uint64 merge_to_region_id = 2;    // merge to region id
}

message ChangePeerRequest {
  dingodb.pb.common.RegionDefinition region_definition = 1;  // region definition contains new peer
}

// RegionCmdType
enum RegionCmdType {
  CMD_NONE = 0;  // this is a placeholder
  CMD_CREATE = 1;
  CMD_DELETE = 2;
  CMD_SPLIT = 3;
  CMD_MERGE = 4;
  CMD_CHANGE_PEER = 5;
}

// RegionCmd
message RegionCmd {
  uint64 id = 1;                      // this is a global nonrepetitive ID for cmd
  uint64 region_id = 2;               // this is region id
  RegionCmdType region_cmd_type = 3;  // the cmd want to be executed
  uint64 create_timestamp = 4;        // the timestamp when this cmd is created
  oneof Request {
    CreateRequest create_request = 11;           // create parameters
    DeleteRequest delete_request = 12;           // delete parameters
    SplitRequest split_request = 13;             // split parameters
    MergeRequest merge_request = 14;             // merge parameters
    ChangePeerRequest change_peer_request = 15;  // change peer parameters
  }
}

// StoreOperation
message StoreOperation {
  uint64 id = 1;  // this is store id
  repeated RegionCmd region_cmds = 2;
}

// Store report self status and region (this node is leader) status
message StoreHeartbeatRequest {
  uint64 self_storemap_epoch = 1;                    // storemap epoch in this Store
  uint64 self_regionmap_epoch = 2;                   // regionmap epoch in this Store
  dingodb.pb.common.Store store = 3;                 // self store info
  repeated dingodb.pb.common.Region regions = 4;     // self region info
  dingodb.pb.common.StoreMetrics store_metrics = 5;  // self store metrics
}

// StoreHeartbeatResponse
message StoreHeartbeatResponse {
  dingodb.pb.error.Error error = 1;
  uint64 storemap_epoch = 2;                  // the lates epoch of storemap
  uint64 regionmap_epoch = 3;                 // the lates epoch of regionmap
  dingodb.pb.common.StoreMap storemap = 4;    // new storemap
  dingodb.pb.common.RegionMap regionmap = 5;  // new regionmap, will be deprecated in future version
  // use PushStoreOperation to push operation to store
  StoreOperation store_operation = 6;  // operations need to be done, will be deprecated in future version
}

message ExecutorHeartbeatRequest {
  uint64 self_executormap_epoch = 1;        // executormap epoch in this Executor
  dingodb.pb.common.Executor executor = 2;  // self executor info
}

message ExecutorHeartbeatResponse {
  dingodb.pb.error.Error error = 1;
  uint64 executormap_epoch = 2;                   // the lates epoch of executormap
  dingodb.pb.common.ExecutorMap executormap = 3;  // new executormap
}

message CoordinatorMemoryInfo {
  uint64 applied_term = 1;
  uint64 applied_index = 2;

  uint64 total_size = 3;

  uint64 id_epoch_safe_map_temp_count = 4;
  uint64 id_epoch_safe_map_temp_size = 5;

  uint64 id_epoch_map_count = 6;
  uint64 id_epoch_map_size = 7;

  uint64 coordinator_map_count = 8;
  uint64 coordinator_map_size = 9;

  uint64 store_map_count = 10;
  uint64 store_map_size = 11;

  uint64 store_need_push_count = 12;
  uint64 store_need_push_size = 13;

  uint64 executor_map_count = 14;
  uint64 executor_map_size = 15;

  uint64 executor_need_push_count = 16;
  uint64 executor_need_push_size = 17;

  uint64 schema_map_count = 18;
  uint64 schema_map_size = 19;

  uint64 region_map_count = 20;
  uint64 region_map_size = 21;

  uint64 table_map_count = 22;
  uint64 table_map_size = 23;

  uint64 store_metrics_map_count = 24;
  uint64 store_metrics_map_size = 25;

  uint64 table_metrics_map_count = 26;
  uint64 table_metrics_map_size = 27;

  repeated dingodb.pb.common.KeyValue id_epoch_values = 28;
}

message HelloRequest {
  uint64 hello = 1;
  bool get_memory_info = 2;
}

message HelloResponse {
  dingodb.pb.error.Error error = 1;
  dingodb.pb.common.CoordinatorState state = 2;
  string status_detail = 3;
  CoordinatorMemoryInfo memory_info = 4;
}

message GetRegionMapRequest {
  uint64 epoch = 1;
}

message GetRegionMapResponse {
  dingodb.pb.error.Error error = 1;
  uint64 epoch = 2;
  dingodb.pb.common.RegionMap regionmap = 3;
}

message GetStoreMapRequest {
  uint64 epoch = 1;
}

message GetStoreMapResponse {
  dingodb.pb.error.Error error = 1;
  uint64 epoch = 2;
  dingodb.pb.common.StoreMap storemap = 3;
}

message GetStoreMetricsRequest {
  uint64 epoch = 1;
}

message GetStoreMetricsResponse {
  dingodb.pb.error.Error error = 1;
  uint64 epoch = 2;
  repeated dingodb.pb.common.StoreMetrics store_metrics = 3;
}

message GetStoreOperationRequest {
  uint64 store_id = 1;  // this is store_id, if 0, means get all store operation
}

message GetStoreOperationResponse {
  dingodb.pb.error.Error error = 1;
  repeated StoreOperation store_operations = 2;
}

message CreateStoreRequest {
  uint64 cluster_id = 1;
}

message CreateStoreResponse {
  dingodb.pb.error.Error error = 1;
  uint64 store_id = 2;
  string keyring = 3;
}

message GetCoordinatorMapRequest {
  uint64 cluster_id = 1;
}

message GetCoordinatorMapResponse {
  uint64 epoch = 1;
  dingodb.pb.common.Location leader_location = 2;
  repeated dingodb.pb.common.Location coordinator_locations = 3;
}

message DeleteStoreRequest {
  uint64 cluster_id = 1;
  uint64 store_id = 2;
  string keyring = 3;
}

message DeleteStoreResponse {
  dingodb.pb.error.Error error = 1;
}

message CreateExecutorRequest {
  uint64 cluster_id = 1;
}

message CreateExecutorResponse {
  dingodb.pb.error.Error error = 1;
  uint64 executor_id = 2;
  string keyring = 3;
}

message DeleteExecutorRequest {
  uint64 cluster_id = 1;
  uint64 executor_id = 2;
  string keyring = 3;
}

message DeleteExecutorResponse {
  dingodb.pb.error.Error error = 1;
}

message GetExecutorMapRequest {
  uint64 epoch = 1;
}

message GetExecutorMapResponse {
  dingodb.pb.error.Error error = 1;
  uint64 epoch = 2;
  dingodb.pb.common.ExecutorMap executormap = 3;
}

message CleanStoreOperationRequest {
  uint64 store_id = 1;
}

message CleanStoreOperationResponse {
  dingodb.pb.error.Error error = 1;
}

message AddStoreOperationRequest {
  StoreOperation store_operation = 1;
}

message AddStoreOperationResponse {
  dingodb.pb.error.Error error = 1;
}

message RemoveStoreOperationRequest {
  uint64 store_id = 1;
  uint64 region_cmd_id = 2;
}

message RemoveStoreOperationResponse {
  dingodb.pb.error.Error error = 1;
}

message QueryRegionRequest {
  uint64 region_id = 1;
}

message QueryRegionResponse {
  dingodb.pb.error.Error error = 1;
  dingodb.pb.common.Region region = 2;
}

message CreateRegionRequest {
  string region_name = 1;
  string resource_tag = 2;
  uint64 replica_num = 3;
  dingodb.pb.common.Range range = 4;
  uint64 schema_id = 5;           // optional
  uint64 table_id = 6;            // optional
  repeated uint64 store_ids = 7;  // optional if not set, will create choose from all stores
}

message CreateRegionResponse {
  dingodb.pb.error.Error error = 1;
  uint64 region_id = 2;
}

message DropRegionRequest {
  uint64 region_id = 1;
}

message DropRegionResponse {
  dingodb.pb.error.Error error = 1;
}

message DropRegionPermanentlyRequest {
  uint64 cluster_id = 1;
  uint64 region_id = 2;
}

message DropRegionPermanentlyResponse {
  dingodb.pb.error.Error error = 1;
}

message SplitRegionRequest {
  SplitRequest split_request = 1;
}

message SplitRegionResponse {
  dingodb.pb.error.Error error = 1;
}

message MergeRegionRequest {
  MergeRequest merge_request = 1;
}

message MergeRegionResponse {
  dingodb.pb.error.Error error = 1;
}

message ChangePeerRegionRequest {
  ChangePeerRequest change_peer_request = 1;
}

message ChangePeerRegionResponse {
  dingodb.pb.error.Error error = 1;
}

service CoordinatorService {
  // Hello
  rpc Hello(HelloRequest) returns (HelloResponse);

  // Store
  rpc StoreHeartbeat(StoreHeartbeatRequest) returns (StoreHeartbeatResponse);
  rpc GetRegionMap(GetRegionMapRequest) returns (GetRegionMapResponse);
  rpc GetStoreMap(GetStoreMapRequest) returns (GetStoreMapResponse);
  rpc GetStoreMetrics(GetStoreMetricsRequest) returns (GetStoreMetricsResponse);

  rpc CreateStore(CreateStoreRequest) returns (CreateStoreResponse);
  rpc DeleteStore(DeleteStoreRequest) returns (DeleteStoreResponse);

  // Executor
  rpc ExecutorHeartbeat(ExecutorHeartbeatRequest) returns (ExecutorHeartbeatResponse);
  rpc CreateExecutor(CreateExecutorRequest) returns (CreateExecutorResponse);
  rpc DeleteExecutor(DeleteExecutorRequest) returns (DeleteExecutorResponse);
  rpc GetExecutorMap(GetExecutorMapRequest) returns (GetExecutorMapResponse);

  // Coordinator
  rpc GetCoordinatorMap(GetCoordinatorMapRequest) returns (GetCoordinatorMapResponse);

  // Region
  rpc QueryRegion(QueryRegionRequest) returns (QueryRegionResponse);
  rpc CreateRegion(CreateRegionRequest) returns (CreateRegionResponse);
  rpc DropRegion(DropRegionRequest) returns (DropRegionResponse);
  rpc DropRegionPermanently(DropRegionPermanentlyRequest) returns (DropRegionPermanentlyResponse);
  rpc SplitRegion(SplitRegionRequest) returns (SplitRegionResponse);
  rpc MergeRegion(MergeRegionRequest) returns (MergeRegionResponse);
  rpc ChangePeerRegion(ChangePeerRegionRequest) returns (ChangePeerRegionResponse);

  // StoreOperation
  rpc GetStoreOperation(GetStoreOperationRequest) returns (GetStoreOperationResponse);
  rpc CleanStoreOperation(CleanStoreOperationRequest) returns (CleanStoreOperationResponse);
  rpc AddStoreOperation(AddStoreOperationRequest) returns (AddStoreOperationResponse);
  rpc RemoveStoreOperation(RemoveStoreOperationRequest) returns (RemoveStoreOperationResponse);
}
