// Copyright (c) 2023 dingodb.com, Inc. All Rights Reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "common.proto";
import "error.proto";

package dingodb.pb.node;

option java_package = "io.dingodb.node";
option cc_generic_services = true;

message NodeInfo {
  int64 id = 1;
  dingodb.pb.common.ClusterRole role = 2;
  dingodb.pb.common.Location server_location = 3;
  dingodb.pb.common.Location raft_location = 4;
}

message GetNodeInfoRequest {
  int64 cluster_id = 1;
}

message GetNodeInfoResponse {
  dingodb.pb.error.Error error = 1;
  NodeInfo node_info = 2;
}

enum LogLevel {
  DEBUG = 0;
  INFO = 1;
  WARNING = 2;
  ERROR = 3;
  FATAL = 4;
}

message LogDetail {
  // Sets the maximum number of seconds which logs may be buffered for.
  uint32 log_buf_secs = 1;
  // Sets the maximum log file size (in MB)
  uint32 max_log_size = 2;
  // Sets whether to avoid logging to the disk if the disk is full.
  bool stop_logging_if_full_disk = 3;
  // set verbose
  uint32 verbose = 4;
}

message GetLogLevelRequest {};
message GetLogLevelResponse {
  dingodb.pb.error.Error error = 1;
  LogLevel log_level = 2;
  LogDetail log_detail = 3;
};

message ChangeLogLevelRequest {
  LogLevel log_level = 1;
  LogDetail log_detail = 2;
};

message ChangeLogLevelResponse {
  dingodb.pb.error.Error error = 1;
};

message MetricsRequest {};
message MetricsResponse {};

message FailPointAction {
  string type = 1;       // action type
  uint32 percent = 2;    // action run percent
  uint32 max_count = 3;  // action max run count
  uint32 run_count = 4;  // already run count
  string arg = 5;
}

message FailPoint {
  string name = 1;    // fail point name, must unique
  string config = 2;  // config format: [<pct>%][<cnt>*]<type>[(args...)][-><more terms>]

  repeated FailPointAction actions = 10;  // just for GetFailPointRequest
}

message SetFailPointRequest {
  FailPoint failpoint = 1;
}

message SetFailPointResponse {
  dingodb.pb.error.Error error = 1;
}

message GetFailPointRequest {
  repeated string names = 1;
}

message GetFailPointResponse {
  dingodb.pb.error.Error error = 1;
  repeated FailPoint failpoints = 2;
}

message DeleteFailPointRequest {
  repeated string names = 1;
}

message DeleteFailPointResponse {
  dingodb.pb.error.Error error = 1;
}

message VectorIndexSnapshotMeta {
  int64 vector_index_id = 1;
  int64 snapshot_log_index = 2;
  repeated string filenames = 3;
}

message InstallVectorIndexSnapshotRequest {
  string uri = 1;  // remote://host:port/reader_id
  VectorIndexSnapshotMeta meta = 2;
}

message InstallVectorIndexSnapshotResponse {
  dingodb.pb.error.Error error = 1;
}

message GetVectorIndexSnapshotRequest {
  int64 vector_index_id = 1;
}

message GetVectorIndexSnapshotResponse {
  dingodb.pb.error.Error error = 1;
  string uri = 2;  // remote://host:port/reader_id
  VectorIndexSnapshotMeta meta = 3;
}

message CheckVectorIndexRequest {
  int64 vector_index_id = 1;
}

message CheckVectorIndexResponse {
  dingodb.pb.error.Error error = 1;
  bool is_exist = 2;
}

service NodeService {
  // GetNodeInfo
  // in: cluster_id
  // out: List<Node>
  rpc GetNodeInfo(GetNodeInfoRequest) returns (GetNodeInfoResponse);

  // Get current log level information
  rpc GetLogLevel(GetLogLevelRequest) returns (GetLogLevelResponse);

  // Change the LogLevel
  rpc ChangeLogLevel(ChangeLogLevelRequest) returns (ChangeLogLevelResponse);

  // Metrics for prometheus
  rpc DingoMetrics(MetricsRequest) returns (MetricsResponse);

  // Set failpoint
  rpc SetFailPoint(SetFailPointRequest) returns (SetFailPointResponse);
  // Get failpoint
  rpc GetFailPoints(GetFailPointRequest) returns (GetFailPointResponse);
  // Delete failpoint
  rpc DeleteFailPoints(DeleteFailPointRequest) returns (DeleteFailPointResponse);

  // Install vector index snapshot
  rpc InstallVectorIndexSnapshot(InstallVectorIndexSnapshotRequest) returns (InstallVectorIndexSnapshotResponse);
  // Get vector index snapshot
  rpc GetVectorIndexSnapshot(GetVectorIndexSnapshotRequest) returns (GetVectorIndexSnapshotResponse);

  // Check region is hold vector index
  rpc CheckVectorIndex(CheckVectorIndexRequest) returns (CheckVectorIndexResponse);
}
