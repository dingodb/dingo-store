// Copyright (c) 2023 dingodb.com, Inc. All Rights Reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package dingodb.pb.common;

option java_package = "io.dingodb.common";
option cc_generic_services = true;

enum ClusterRole {
  ILLEGAL = 0;
  COORDINATOR = 1;
  STORE = 2;
  EXECUTOR = 3;
};

enum Engine {
  ENG_ROCKSDB = 0;
  ENG_MEMORY = 1;
  ENG_XDP = 2;
  ENG_RAFT_STORE = 3;
  ENG_COLUMNAR = 4;
};

enum RawEngine { RAW_ENG_ROCKSDB = 0; };

message Location {
  string host = 1;
  int32 port = 2;
}

message Range {
  bytes start_key = 1;
  bytes end_key = 2;
}

message KeyValue {
  bytes key = 1;
  bytes value = 2;
}

enum CoordinatorState {
  COORDINATOR_NORMAL = 0;
  COORDINATOR_OFFLINE = 1;
}

enum StoreState {
  STORE_NORMAL = 0;
  STORE_NEW = 1;      // a new store, wait to startup and join raft
  STORE_OFFLINE = 2;  // miss hearteat
  STORE_OUT = 3;      // up but no data will distribute to this store
}

enum ExecutorState {
  EXECUTOR_NORMAL = 0;
  EXECUTOR_NEW = 1;      // a new store, wait to startup and join raft
  EXECUTOR_OFFLINE = 2;  // miss hearteat
}

enum RegionState {
  REGION_NORMAL = 0;

  REGION_NEW = 1;  // create new region

  REGION_DEGRADED = 2;  // region has less than 3 peer
  REGION_DANGER = 3;    // region has only one peer

  REGION_EXPAND = 4;     // start to expand
  REGION_EXPANDING = 5;  // leader start to expand region
  REGION_EXPANDED = 6;   // new peer joined raft

  REGION_SHRINK = 7;      // start to shrink
  REGION_SHIRINKING = 8;  // leader start to shrink region
  REGION_SHRANK = 9;      // shrink finish, maybe we don't need this state

  REGION_DELETE = 10;    // region need to delete
  REGION_DELETING = 11;  // region is deleting
  REGION_DELETED = 12;   // region is deleted
  // other state add here
}

message Coordinator {
  uint64 id = 1;
  CoordinatorState state = 2;
  Location location = 3;
  string resource_tag = 4;
}

message CoordinatorMap {
  uint64 epoch = 1;
  repeated Coordinator coordinators = 2;
}

message Executor {
  uint64 id = 1;
  uint64 epoch = 2;
  ExecutorState state = 3;
  Location server_location = 4;
  Location raft_location = 5;
  string resource_tag = 6;
  string keyring = 7;
}

message ExecutorMap {
  uint64 epoch = 1;
  repeated Executor executors = 2;
}

message Store {
  uint64 id = 1;
  uint64 epoch = 2;
  StoreState state = 3;
  Location server_location = 4;
  Location raft_location = 5;
  string resource_tag = 6;
  string keyring = 7;
}

message StoreMap {
  uint64 epoch = 1;
  repeated Store stores = 2;
}

enum PeerRole {
  VOTER = 0;
  LEARNER = 1;
}

message Peer {
  uint64 store_id = 1;
  PeerRole role = 2;
  Location server_location = 3;
  Location raft_location = 4;
}

message Region {
  // store info
  uint64 id = 1;
  uint64 epoch = 2;
  string name = 3;
  RegionState state = 4;
  int64 leader_store_id = 5;
  repeated Peer peers = 6;
  Range range = 7;

  // meta info
  uint64 schema_id = 8;
  uint64 table_id = 9;

  // other
  uint64 create_timestamp = 10;
}

message RegionMap {
  uint64 epoch = 1;
  repeated Region regions = 2;
}
