// Copyright (c) 2023 dingodb.com, Inc. All Rights Reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "common.proto";
import "coordinator.proto";
import "meta.proto";
import "error.proto";

package dingodb.pb.coordinator_internal;

// StoreOperationInternal
message StoreOperationInternal {
  int64 id = 1;  // this is store id
  repeated int64 region_cmd_ids = 2;
}

message RegionCmdInternal {
  int64 id = 1;  // this is region_cmd_id
  dingodb.pb.coordinator.RegionCmd region_cmd = 2;
  dingodb.pb.error.Error error = 3;  // if region_cmd is not success, this field will be set from store response
}

message CommonInternal {
  bytes id = 1;
  bytes value = 2;
}

// TableInternal is storage structure for coordinator
message TableInternal {
  int64 id = 1;
  dingodb.pb.meta.TableDefinition definition = 2;
  int64 schema_id = 3;
  int64 table_id = 4;

  // if the partition_is is continuous, this field will be set, else this field will be empty.
  // if this field is empty, we will do ScanRegions for each partition to get the region list.
  dingodb.pb.common.Range range = 5;

  int64 tenant_id = 6;
}

// TableMetricsInternal is storage structure for table_metrics
message TableMetricsInternal {
  int64 id = 1;
  dingodb.pb.meta.TableMetrics table_metrics = 2;
}

// TableIndexInternal is storage structure for table
message TableIndexInternal {
  int64 id = 1;
  repeated dingodb.pb.meta.DingoCommonId table_ids = 2;
  int64 revision = 3;
  int64 tenant_id = 4;
}

// IndexMetricsInternal is storage structure for index_metrics
message IndexMetricsInternal {
  int64 id = 1;
  dingodb.pb.meta.IndexMetrics index_metrics = 2;
}

// TenantInternal is storage structure for tenant
message TenantInternal {
  int64 id = 1;
  string name = 2;
  string comment = 3;
  int64 create_timestamp = 10;
  int64 update_timestamp = 11;
  int64 delete_timestamp = 12;

  int64 safe_point_ts = 20;
  int64 revision = 21;
}

// SchemaInternal is storage structure for schema
message SchemaInternal {
  int64 id = 1;
  string name = 2;
  repeated int64 table_ids = 3;
  repeated int64 index_ids = 4;
  int64 revision = 5;
  int64 tenant_id = 6;
}

// CoordinatorInteral stores coordinator info for SDK & stores.
message CoordinatorInternal {
  int64 id = 1;
  dingodb.pb.common.Location server_location = 2;
  dingodb.pb.common.Location raft_location = 3;
}

// RegionInternal
message RegionInternal {
  // region id
  int64 id = 1;
  // region conf version & version
  int64 epoch = 2;
  // region type
  dingodb.pb.common.RegionType region_type = 3;
  // region definition
  dingodb.pb.common.RegionDefinition definition = 4;

  dingodb.pb.common.RegionState state = 10;

  // timestamp
  int64 create_timestamp = 20;
  int64 deleted_timestamp = 21;
}

// ExecutorInternal
message ExecutorUserInternal {
  string id = 1;  // this is user name
  string keyring = 2;
}

enum IdEpochType {
  ID_NONE = 0;  // this is a placeholder

  ID_NEXT_COORINATOR = 1;
  ID_NEXT_STORE = 2;
  ID_NEXT_EXECUTOR = 3;
  ID_NEXT_SCHEMA = 4;
  ID_NEXT_REGION = 5;
  ID_NEXT_TABLE = 6;
  ID_NEXT_INDEX = 7;  // deprecated for index id auto_increment
  ID_NEXT_TENANT = 8;

  EPOCH_COORINATOR = 11;
  EPOCH_STORE = 12;
  EPOCH_EXECUTOR = 13;
  EPOCH_SCHEMA = 14;
  EPOCH_REGION = 15;
  EPOCH_TABLE = 16;
  EPOCH_INDEX = 17;

  RAFT_APPLY_TERM = 21;
  RAFT_APPLY_INDEX = 22;

  ID_NEXT_REGION_CMD = 31;
  ID_NEXT_TASK_LIST = 32;

  ID_NEXT_LEASE = 40;
  ID_NEXT_REVISION = 41;

  ID_NEXT_META_WATCH = 42;

  ID_GC_SAFE_POINT = 50;
}

message IdEpochInternal {
  int64 id = 1;
  int64 value = 2;
}

message AutoIncrementStorageElement {
  int64 table_id = 1;
  int64 start_id = 2;
}

message AutoIncrementStorage {
  repeated AutoIncrementStorageElement elements = 1;
}

enum AutoIncrementUpdateType {
  READ_MODIFY_WRITE = 0;
  UPDATE_ONLY = 1;
}

message IncrementInternal {
  int64 start_id = 1;
  int64 source_start_id = 2;
  AutoIncrementUpdateType update_type = 3;
  uint32 generate_count = 4;
  uint32 increment = 5;
  uint32 offset = 6;
}

message IdEpochInternals {
  repeated IdEpochInternal next_id = 1;
}

enum MetaIncrementOpType {
  CREATE = 0;
  UPDATE = 1;
  DELETE = 2;
  MODIFY = 3;  // this is for modify operation, defined by each type
}

message MetaIncrementCoordinator {
  int64 id = 1;
  dingodb.pb.coordinator_internal.CoordinatorInternal coordinator = 2;
  MetaIncrementOpType op_type = 3;
}

message MetaIncrementStore {
  int64 id = 1;
  dingodb.pb.common.Store store = 2;
  MetaIncrementOpType op_type = 3;
}

message MetaIncrementStoreMetrics {
  int64 id = 1;
  dingodb.pb.common.StoreMetrics store_metrics = 2;
  MetaIncrementOpType op_type = 3;
  bool is_partial_region_metrics = 4;
}

message MetaIncrementTableMetrics {
  int64 id = 1;
  dingodb.pb.coordinator_internal.TableMetricsInternal table_metrics = 2;
  MetaIncrementOpType op_type = 3;
}

message MetaIncrementIndexMetrics {
  int64 id = 1;
  dingodb.pb.coordinator_internal.IndexMetricsInternal index_metrics = 2;
  MetaIncrementOpType op_type = 3;
}

message MetaIncrementExecutor {
  string id = 1;
  dingodb.pb.common.Executor executor = 2;
  MetaIncrementOpType op_type = 3;
}

message MetaIncrementRegion {
  int64 id = 1;
  // dingodb.pb.common.Region region = 2;
  RegionInternal region = 2;
  MetaIncrementOpType op_type = 3;
  int64 table_id = 4;
}

message MetaIncrementSchema {
  int64 id = 1;
  SchemaInternal schema_internal = 2;
  MetaIncrementOpType op_type = 3;
  int64 schema_id = 4;  // DEPRECATED: parent schema is always 0 now
}

message MetaIncrementTable {
  int64 id = 1;
  TableInternal table = 2;
  MetaIncrementOpType op_type = 3;
}

// MetaIncrementTableIndex
// CAUTION:  if op_type is UDPATE, there will only whole update using the table_indexes=3 or partial update using
// table_ids_to_add=4 or table_ids_to_del=5
// the UPDATE cannot do both whole update and partial update at the same time
message MetaIncrementTableIndex {
  int64 id = 1;
  TableIndexInternal table_indexes = 2;
  MetaIncrementOpType op_type = 3;
  repeated dingodb.pb.meta.DingoCommonId table_ids_to_add = 4;
  repeated dingodb.pb.meta.DingoCommonId table_ids_to_del = 5;
}

message MetaIncrementCommonDisk {
  bytes id = 1;
  CommonInternal common = 2;
  MetaIncrementOpType op_type = 3;
}

message MetaIncrementCommonMem {
  bytes id = 1;
  CommonInternal common = 2;
  MetaIncrementOpType op_type = 3;
}

message MetaIncrementIdEpoch {
  int64 id = 1;
  IdEpochInternal idepoch = 2;
  MetaIncrementOpType op_type = 3;
}

message MetaIncrementStoreOperation {
  message MoveRegionCmd {
    int64 region_cmd_id = 1;
    int64 from_store_id = 2;
    int64 to_store_id = 3;
  }

  int64 id = 1;  // this is store id
  StoreOperationInternal store_operation = 2;
  MetaIncrementOpType op_type = 3;

  oneof Modify {
    MoveRegionCmd move_region_cmd = 4;
  }
}

message MetaIncrementRegionCmd {
  int64 id = 1;  // this is region_cmd id
  RegionCmdInternal region_cmd = 2;
  MetaIncrementOpType op_type = 3;
}

message MetaIncrementExecutorUser {
  string id = 1;  // this is executor_user_name
  ExecutorUserInternal executor_user = 2;
  MetaIncrementOpType op_type = 3;
}

message MetaIncrementAutoIncrement {
  int64 id = 1;
  IncrementInternal increment = 2;
  MetaIncrementOpType op_type = 3;
}

message MetaIncrementRegionCmdStatus {
  int64 region_cmd_id = 1;
  dingodb.pb.coordinator.RegionCmdStatus status = 2;
  dingodb.pb.error.Error error = 3;
}

message MetaIncrementTaskList {
  int64 id = 1;  // this is task list id
  dingodb.pb.coordinator.TaskList task_list = 2;
  MetaIncrementOpType op_type = 3;
  bool is_partial_update = 4;
  repeated MetaIncrementRegionCmdStatus region_cmds_status = 5;
}

// lease
message LeaseInternal {
  int64 id = 1;
  int64 ttl_seconds = 2;
  int64 create_ts_seconds = 3;
  int64 last_renew_ts_seconds = 4;
}

message MetaIncrementLease {
  int64 id = 1;
  LeaseInternal lease = 2;
  MetaIncrementOpType op_type = 3;
}

// A revision indicates modification of the key-value space.
// The set of changes that share same main revision changes the key-value space atomically.
message RevisionInternal {
  // main is the main revision of a set of changes that happen atomically.
  int64 main = 1;

  // sub is the sub revision of a change in a set of changes that happen
  // atomically. Each change has different increasing sub revision in that
  // set.
  int64 sub = 2;
}

// keyIndex stores the revisions of a key in the backend.
// Each keyIndex has at least one key generation.
// Each generation might have several key versions.
// Tombstone on a key appends an tombstone version at the end
// of the current generation and creates a new empty generation.
// Each version of a key has an index pointing to the backend.
message KvIndexInternal {
  message Generation {
    int64 verison = 1;                        // if verison == 0, means this is a empty generation
    RevisionInternal create_revision = 2;     // the create revision of this generation
    repeated RevisionInternal revisions = 3;  // the revisions of this generation
  }

  bytes id = 1;  // id is the key of the keyIndex.
  RevisionInternal mod_revision = 2;
  repeated Generation generations = 3;
}

message KvInternal {
  bytes id = 1;  // id is the key of the keyIndex.
  bytes value = 2;
  RevisionInternal create_revision = 3;
  RevisionInternal mod_revision = 4;
  int64 version = 5;
  int64 lease = 6;
  bool is_deleted = 7;  // for delete operation, we set is_deleted to true, and set value to empty
}

message KvRevInternal {
  bytes id = 1;  // id is the key of the KvRev, it's encode from RevisionInternal
  KvInternal kv = 2;
}

enum KvIndexEventType {
  KV_INDEX_EVENT_TYPE_NONE = 0;
  KV_INDEX_EVENT_TYPE_PUT = 1;
  KV_INDEX_EVENT_TYPE_DELETE = 2;
  KV_INDEX_EVENT_TYPE_COMPACTION = 3;
}

message MetaIncrementKvIndex {
  bytes id = 1;
  MetaIncrementOpType op_type = 2;
  KvIndexEventType event_type = 3;   // put / delete / compact
  RevisionInternal op_revision = 4;  // this is the op_version of put/delete, or compaction_revision of compact
  bool ignore_lease = 5;
  int64 lease_id = 6;
  bool ignore_value = 7;
  bytes value = 8;
}

message MetaIncrementKvRevision {
  bytes id = 1;
  KvRevInternal kv_rev = 2;
  MetaIncrementOpType op_type = 3;
}

message MetaIncrementTso {
  dingodb.pb.meta.TsoRequest tso_request = 1;
}

// Tenant
message MetaIncrementTenant {
  int64 id = 1;
  TenantInternal tenant = 2;
  MetaIncrementOpType op_type = 3;
}

// MetaIncrement stores meta data need to be inserted or updated
message MetaIncrement {
  repeated MetaIncrementCoordinator coordinators = 1;
  repeated MetaIncrementStore stores = 2;
  repeated MetaIncrementRegion regions = 3;
  repeated MetaIncrementSchema schemas = 4;
  repeated MetaIncrementTable tables = 5;
  repeated MetaIncrementIdEpoch idepochs = 6;
  repeated MetaIncrementExecutor executors = 7;
  repeated MetaIncrementStoreMetrics store_metrics = 8;
  repeated MetaIncrementTableMetrics table_metrics = 9;
  repeated MetaIncrementStoreOperation store_operations = 10;
  repeated MetaIncrementRegionCmd region_cmds = 11;
  repeated MetaIncrementExecutorUser executor_users = 12;
  repeated MetaIncrementTaskList task_lists = 13;
  repeated MetaIncrementTable indexes = 14;
  repeated MetaIncrementIndexMetrics index_metrics = 15;

  repeated MetaIncrementAutoIncrement auto_increment = 20;
  repeated MetaIncrementTso timestamp_oracles = 21;
  repeated MetaIncrementRegion deleted_regions = 30;
  repeated MetaIncrementTable deleted_tables = 31;
  repeated MetaIncrementTable deleted_indexes = 32;

  repeated MetaIncrementLease leases = 40;
  repeated MetaIncrementKvIndex kv_indexes = 41;
  repeated MetaIncrementKvRevision kv_revs = 42;

  repeated MetaIncrementTableIndex table_indexes = 50;

  repeated MetaIncrementCommonDisk common_disk_s = 51;
  repeated MetaIncrementCommonMem common_mem_s = 52;

  repeated MetaIncrementTenant tenants = 53;
}

message TsoStorage {
  int64 physical = 1;
}

// snapshot pb file message
message MetaSnapshotFile {
  repeated dingodb.pb.common.KeyValue id_epoch_map_kvs = 1;
  repeated dingodb.pb.common.KeyValue coordinator_map_kvs = 2;
  repeated dingodb.pb.common.KeyValue store_map_kvs = 3;
  repeated dingodb.pb.common.KeyValue executor_map_kvs = 4;
  repeated dingodb.pb.common.KeyValue schema_map_kvs = 5;
  repeated dingodb.pb.common.KeyValue region_map_kvs = 6;
  repeated dingodb.pb.common.KeyValue table_map_kvs = 7;
  repeated dingodb.pb.common.KeyValue store_metrics_map_kvs = 8;
  repeated dingodb.pb.common.KeyValue table_metrics_map_kvs = 9;
  repeated dingodb.pb.common.KeyValue store_operation_map_kvs = 10;
  repeated dingodb.pb.common.KeyValue region_cmd_map_kvs = 11;
  repeated dingodb.pb.common.KeyValue executor_user_map_kvs = 12;
  repeated dingodb.pb.common.KeyValue task_list_map_kvs = 13;
  repeated dingodb.pb.common.KeyValue index_map_kvs = 14;
  repeated dingodb.pb.common.KeyValue index_metrics_map_kvs = 15;

  repeated dingodb.pb.common.KeyValue auto_increment_map_kvs = 20;  // now unused, just a placeholder
  AutoIncrementStorage auto_increment_storage = 21;
  repeated dingodb.pb.common.KeyValue table_index_map_kvs = 22;
  TsoStorage tso_storage = 23;

  repeated dingodb.pb.common.KeyValue deleted_region_map_kvs = 30;
  repeated dingodb.pb.common.KeyValue deleted_table_map_kvs = 31;
  repeated dingodb.pb.common.KeyValue deleted_index_map_kvs = 32;

  repeated dingodb.pb.common.KeyValue lease_map_kvs = 40;
  repeated dingodb.pb.common.KeyValue kv_index_map_kvs = 41;
  repeated dingodb.pb.common.KeyValue kv_rev_map_kvs = 42;

  repeated dingodb.pb.common.KeyValue common_disk_map_kvs = 51;
  repeated dingodb.pb.common.KeyValue common_mem_map_kvs = 52;

  repeated dingodb.pb.common.KeyValue tenant_map_kvs = 53;
}
