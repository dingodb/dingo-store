// Copyright (c) 2023 dingodb.com, Inc. All Rights Reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "common.proto";
import "meta.proto";

package dingodb.pb.coordinator_internal;

// PartInternal is storage structure for coordinator
// PartInternal is not table partition in SQL, its only use for storage.
message PartInternal {
  uint64 region_id = 1;               // the region id of this part
  dingodb.pb.common.Range range = 2;  // the range of this part
}

// TableInternal is storage structure for coordinator
message TableInternal {
  uint64 id = 1;
  dingodb.pb.meta.TableDefinition definition = 2;
  repeated PartInternal partitions = 3;
}

// SchemaInternal is storage structure for schema
message SchemaInternal {
  uint64 id = 1;
  dingodb.pb.meta.Schema schema = 2;
}

// CoordinatorInteral stores coordinator info for SDK & stores.
message CoordinatorInternal {
  uint64 id = 1;
  dingodb.pb.common.Location server_location = 2;
  dingodb.pb.common.Location raft_location = 3;
}

enum IdEpochType {
  ID_NEXT_COORINATOR = 0;
  ID_NEXT_STORE = 1;
  ID_NEXT_SCHEMA = 2;
  ID_NEXT_REGION = 3;
  ID_NEXT_TABLE = 4;

  EPOCH_COORINATOR = 5;
  EPOCH_STORE = 6;
  EPOCH_SCHEMA = 7;
  EPOCH_REGION = 8;
  EPOCH_TABLE = 9;
}

message IdEpochInternal {
  uint64 id = 1;
  uint64 value = 2;
}

message IdEpochInternals {
  repeated IdEpochInternal next_id = 1;
}

enum MetaIncrementOpType {
  CREATE = 0;
  UPDATE = 1;
  DELETE = 2;
}

message MetaIncrementCoordinator {
  uint64 id = 1;
  dingodb.pb.coordinator_internal.CoordinatorInternal coordinator = 2;
  MetaIncrementOpType op_type = 3;
}

message MetaIncrementStore {
  uint64 id = 1;
  dingodb.pb.common.Store store = 2;
  MetaIncrementOpType op_type = 3;
}

message MetaIncrementRegion {
  uint64 id = 1;
  dingodb.pb.common.Region region = 2;
  MetaIncrementOpType op_type = 3;
  uint64 table_id = 4;
}

message MetaIncrementSchema {
  uint64 id = 1;
  SchemaInternal schema_internal = 2;
  MetaIncrementOpType op_type = 3;
  uint64 schema_id = 4;  // parent schema
}

message MetaIncrementTable {
  uint64 id = 1;
  dingodb.pb.coordinator_internal.TableInternal table = 2;
  MetaIncrementOpType op_type = 3;
  uint64 schema_id = 4;  // the table's schema
}

message MetaIncrementIdEpoch {
  uint64 id = 1;
  IdEpochInternal idepoch = 2;
  MetaIncrementOpType op_type = 3;
}

// MetaIncrement stores meta data need to be inserted or updated
message MetaIncrement {
  repeated MetaIncrementCoordinator coordinators = 1;
  repeated MetaIncrementStore stores = 2;
  repeated MetaIncrementRegion regions = 3;
  repeated MetaIncrementSchema schemas = 4;
  repeated MetaIncrementTable tables = 5;
  repeated MetaIncrementIdEpoch idepochs = 6;
}