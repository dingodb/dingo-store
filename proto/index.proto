// Copyright (c) 2023 dingodb.com, Inc. All Rights Reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "common.proto";
import "error.proto";
import "store.proto";

package dingodb.pb.index;

option java_package = "io.dingodb.index";
option cc_generic_services = true;

message VectorAddRequest {
  dingodb.pb.store.Context context = 1;
  repeated dingodb.pb.common.VectorWithId vectors = 2;
  bool replace_deleted = 3;
  bool is_update = 4;
}

message VectorAddResponse {
  dingodb.pb.error.Error error = 1;
  // return the execution status of each key
  // key_states[index] = true, add success
  // key_states[index] = false, add failed
  repeated bool key_states = 2;
}

message VectorBatchQueryRequest {
  dingodb.pb.store.Context context = 1;
  repeated int64 vector_ids = 2;
  bool without_vector_data = 3;       // Default false, if true, response without vector data.
  bool without_scalar_data = 4;       // Default false, if true, response without scalar data.
  repeated string selected_keys = 5;  // If without_scalar_data is false, selected_keys is used to select scalar data,
                                      // if this parameter is null, all scalar data will be returned.
  bool without_table_data = 6;        // Default false, if true, response without table data.
}

message VectorBatchQueryResponse {
  dingodb.pb.error.Error error = 1;
  repeated dingodb.pb.common.VectorWithId vectors = 2;
}

message VectorScanQueryRequest {
  dingodb.pb.store.Context context = 1;
  int64 vector_id_start = 2;
  bool is_reverse_scan = 3;
  int64 max_scan_count = 4;  // the max count user want to scan
  int64 vector_id_end = 5;   // the end id of scan, if is_reverse_scan is true, vector_id_end must be less than
                             // vector_id_start, if is_reverse_scan is false, vector_id_end must be greater than
                             // vector_id_start
                             // the real range is [start, end], include start and end
                             // if vector_id_end == 0, scan to the end of the region

  bool without_vector_data = 11;       // Default false, if true, response without vector data.
  bool without_scalar_data = 12;       // Default false, if true, response without scalar data.
  repeated string selected_keys = 13;  // If without_scalar_data is false, selected_keys is used to select scalar data,
                                       // if this parameter is null, all scalar data will be returned.
  bool without_table_data = 14;        // Default false, if true, response without table data.

  // Whether to use scalar filtering.
  bool use_scalar_filter = 20;
  dingodb.pb.common.VectorScalardata scalar_for_filter = 21;
}

message VectorScanQueryResponse {
  dingodb.pb.error.Error error = 1;
  repeated dingodb.pb.common.VectorWithId vectors = 2;
}

message VectorGetRegionMetricsRequest {
  dingodb.pb.store.Context context = 1;
}

message VectorGetRegionMetricsResponse {
  dingodb.pb.error.Error error = 1;
  dingodb.pb.common.VectorIndexMetrics metrics = 2;
}

message VectorSearchRequest {
  dingodb.pb.store.Context context = 1;
  dingodb.pb.common.VectorSearchParameter parameter = 2;
  repeated dingodb.pb.common.VectorWithId vector_with_ids = 3;  // this field is used for batch search
}

message VectorWithDistanceResult {
  repeated dingodb.pb.common.VectorWithDistance vector_with_distances = 1;
}

message VectorSearchResponse {
  dingodb.pb.error.Error error = 1;
  repeated VectorWithDistanceResult batch_results = 2;  // this field is used for batch search
}

message VectorDeleteRequest {
  dingodb.pb.store.Context context = 1;
  repeated int64 ids = 2;
}

message VectorDeleteResponse {
  dingodb.pb.error.Error error = 1;
  // return the execution status of each key
  // key_states[index] = true, delete success
  // key_states[index] = false, key not exist
  repeated bool key_states = 2;
}

message VectorGetBorderIdRequest {
  dingodb.pb.store.Context context = 1;
  bool get_min = 2;  // if true, get min id, else get max id
}

message VectorGetBorderIdResponse {
  dingodb.pb.error.Error error = 1;
  int64 id = 2;
}

enum AlgorithmType {
  ALGORITHM_NONE = 0;
  ALGORITHM_FAISS = 1;
  ALGORITHM_HNSWLIB = 2;
}

message VectorCalcDistanceRequest {
  // which library algorithm to use
  AlgorithmType algorithm_type = 1;

  // must be valid
  dingodb.pb.common.MetricType metric_type = 2;

  // target vector arrays . empty do nothing. no error.
  repeated dingodb.pb.common.Vector op_left_vectors = 3;

  // source vector arrays . empty do nothing. no error.
  repeated dingodb.pb.common.Vector op_right_vectors = 4;

  // whether to return the normalized result.
  bool is_return_normlize = 5;
}

message VectorDistance {
  repeated float internal_distances = 1;
}

message VectorCalcDistanceResponse {
  dingodb.pb.error.Error error = 1;

  // return normalized result if is_return_normlize is true
  repeated dingodb.pb.common.Vector op_left_vectors = 2;

  // return normalized result if is_return_normlize is true
  repeated dingodb.pb.common.Vector op_right_vectors = 3;

  // num distance values = op_left_vectors *  op_right_vectors
  repeated VectorDistance distances = 4;
}

// vector.id > 0: exact query
// vector.id == 0: similarity search with vector.vector
message VectorSearchDebugRequest {
  dingodb.pb.store.Context context = 1;

  dingodb.pb.common.VectorWithId vector = 2;
  dingodb.pb.common.VectorSearchParameter parameter = 3;
  repeated dingodb.pb.common.VectorWithId vector_with_ids = 4;  // this field is used for batch search
}

message VectorSearchDebugResponse {
  dingodb.pb.error.Error error = 1;
  repeated dingodb.pb.common.VectorWithDistance results = 2;
  repeated VectorWithDistanceResult batch_results = 3;  // this field is used for batch search

  // scalar scan time unit  microsecond 10 -6 s
  int64 deserialization_id_time_us = 4;

  // scalar scan time unit  microsecond 10 -6 s
  int64 scan_scalar_time_us = 5;

  // search  vector unit  microsecond 10 -6 s
  int64 search_time_us = 6;
}

message VectorCountRequest {
  dingodb.pb.store.Context context = 1;
  // [vector_id_start, vector_id_end)
  int64 vector_id_start = 2;  // default region range start_key
  int64 vector_id_end = 3;    // default region range end_key, not include
}

message VectorCountResponse {
  dingodb.pb.error.Error error = 1;
  int64 count = 2;
}

message VectorGetParameter {
  // the parameter below is inherited from VectorBatchQueryRequest
  bool without_vector_data = 1;       // Default false, if true, response without vector data.
  bool without_scalar_data = 2;       // Default false, if true, response without scalar data.
  repeated string selected_keys = 3;  // If without_scalar_data is false, selected_keys is used to select scalar data,
                                      // if this parameter is null, all scalar data will be returned.
  bool without_table_data = 4;        // Default false, if true, response without table data.
}

message TxnGetResponse {
  // error code
  dingodb.pb.error.Error error = 1;
  // A value could not be retrieved due to the state of the database for the
  // requested key.
  // the txn_result is one of the following:
  // 1. LockInfo: Read conflict with key which is locked by another transaction. The client should backoff or cleanup
  // the lock then retry.
  // 2. otherwise, txn_result is empty
  dingodb.pb.store.TxnResultInfo txn_result = 2;
  // The vector value associated with the key, if not found, is empty and error is NOT_FOUND
  // dingo-store do not accept NULL value, so if value is NULL, it means the key is not exist
  dingodb.pb.common.VectorWithId vector = 3;
  // True if the key does not exist in the database.
  // bool not_found = 4;
}

// TxnScan can be partially success
// if kvs is not null, and has_more is true, means scan is not finished, client should continue to scan from end_key.
// if txn_result is not null, the kvs may not null, client can use kvs as a partial result, and should continue to scan
// after resolve lock.
message TxnScanResponse {
  // error code
  dingodb.pb.error.Error error = 1;
  // This txn_result exists when some key is locked but we cannot check locks of
  // all keys. In this case, `kvs` should be empty and the client should redo
  // scanning all the keys after resolving the lock.
  // the txn_result is one of the following:
  // 1. LockInfo: Read conflict with key which is locked by another transaction.
  // 2. otherwise, txn_result is empty
  dingodb.pb.store.TxnResultInfo txn_result = 2;
  // vectors is the return value of the scan request
  repeated dingodb.pb.common.VectorWithId vectors = 3;
  // if scan is not finished, has_more is true, otherwise false
  bool has_more = 4;
  // the last iteratered key of this scan response.
  // if end_key is null, means scan do not successfully iterate any key.
  bytes end_key = 5;
}

message Mutation {
  dingodb.pb.store.Op op = 1;
  // the key is encoded from a char prefix and two int64 using big-endian, the first int64 is the part id, the second
  // int64 is the vector id. The key MUST be 17 bytes.
  bytes key = 2;
  dingodb.pb.common.VectorWithId vector = 3;
}

message TxnPrewriteRequest {
  dingodb.pb.store.Context context = 1;
  // The data to be written to the database.
  repeated Mutation mutations = 2;
  // The primary lock of the transaction is setup by client
  bytes primary_lock = 3;
  // Identifies the transaction being written.
  int64 start_ts = 4;
  // the lock's ttl is timestamp in milisecond.
  int64 lock_ttl = 5;
  // the number of keys involved in the transaction
  int64 txn_size = 6;
  // When the transaction involves only one region, it's possible to commit the
  // transaction directly with 1PC protocol.
  bool try_one_pc = 7;
  // The max commit ts is reserved for limiting the commit ts of 1PC, which can be used to avoid inconsistency with
  // schema change. This field is unused now.
  int64 max_commit_ts = 8;
}

message TxnBatchGetResponse {
  // error code
  dingodb.pb.error.Error error = 1;
  // This txn_result exists when some key is locked but we cannot check locks of
  // all keys. In this case, `kvs` should be empty and the client should redo
  // batch get all the keys after resolving the lock.
  // the txn_result is one of the following:
  // 1. LockInfo: Read conflict with key which is locked by another transaction. The client should backoff or cleanup
  // the lock then retry.
  // 2. otherwise, txn_result is empty
  dingodb.pb.store.TxnResultInfo txn_result = 2;
  // When some key is locked but we cannot check locks of
  // all keys. In this case, `vectors` should be empty and the client should redo
  // batch get all the keys after resolving the lock.
  repeated dingodb.pb.common.VectorWithId vectors = 3;
}

// Update the lock_ttl of a large transaction to
// prevent it from been killed.
message TxnHeartBeatRequest {
  dingodb.pb.store.Context context = 1;
  // The key of the lock to update.
  bytes primary_lock = 2;
  // Start timestamp of the large transaction.
  int64 start_ts = 3;
  // The new TTL the sender would like.
  // The advise_lock_ttl is the timestamp of milisecond.
  int64 advise_lock_ttl = 4;
}

message TxnHeartBeatResponse {
  // error code
  dingodb.pb.error.Error error = 1;
  // the txn_result is one of the following:
  // 1. PrimaryMismatch: Heartbeat is sent to a lock that's not the primary.
  // 2. TxnNotFound: Txn not found when heartbeat.
  // 3. otherwise, txn_result is empty
  dingodb.pb.store.TxnResultInfo txn_result = 2;
  // The TTL actually set on the requested lock.
  int64 lock_ttl = 3;
}

// Request dingo-store to garbage collect all non-current data older than `safe_point_ts`.
message TxnGcRequest {
  dingodb.pb.store.Context context = 1;
  int64 safe_point_ts = 2;
}

message TxnGcResponse {
  // error code
  dingodb.pb.error.Error error = 1;
  dingodb.pb.store.TxnResultInfo txn_result = 2;
}

message TxnDeleteRangeResponse {
  // error code
  dingodb.pb.error.Error error = 1;
}

message HelloRequest {
  dingodb.pb.store.Context context = 1;
  bool get_region_metrics = 2;
}

message HelloResponse {
  // error code
  dingodb.pb.error.Error error = 1;
  int64 region_count = 2;
  int64 region_leader_count = 3;
  repeated dingodb.pb.common.RegionMetrics region_metrics = 4;
}

service IndexService {
  rpc Hello(HelloRequest) returns (HelloResponse);
  // vector index
  rpc VectorAdd(VectorAddRequest) returns (VectorAddResponse);
  rpc VectorBatchQuery(VectorBatchQueryRequest) returns (VectorBatchQueryResponse);
  rpc VectorSearch(VectorSearchRequest) returns (VectorSearchResponse);
  rpc VectorDelete(VectorDeleteRequest) returns (VectorDeleteResponse);
  rpc VectorGetBorderId(VectorGetBorderIdRequest) returns (VectorGetBorderIdResponse);
  rpc VectorScanQuery(VectorScanQueryRequest) returns (VectorScanQueryResponse);
  rpc VectorGetRegionMetrics(VectorGetRegionMetricsRequest) returns (VectorGetRegionMetricsResponse);
  rpc VectorCount(VectorCountRequest) returns (VectorCountResponse);

  // debug
  // test  vector search performance
  rpc VectorSearchDebug(VectorSearchDebugRequest) returns (VectorSearchDebugResponse);

  // txn rpcs
  rpc TxnGet(dingodb.pb.store.TxnGetRequest) returns (TxnGetResponse);
  rpc TxnBatchGet(dingodb.pb.store.TxnBatchGetRequest) returns (TxnBatchGetResponse);
  rpc TxnScan(dingodb.pb.store.TxnScanRequest) returns (TxnScanResponse);
  rpc TxnScanLock(dingodb.pb.store.TxnScanLockRequest) returns (dingodb.pb.store.TxnScanLockResponse);
  rpc TxnDump(dingodb.pb.store.TxnDumpRequest) returns (dingodb.pb.store.TxnDumpResponse);

  rpc TxnPessimisticLock(dingodb.pb.store.PessimisticLockRequest) returns (dingodb.pb.store.PessimisticLockResponse);
  rpc TxnPessimisticRollback(dingodb.pb.store.PessimisticRollbackRequest)
      returns (dingodb.pb.store.PessimisticRollbackResponse);
  rpc TxnPrewrite(TxnPrewriteRequest) returns (dingodb.pb.store.TxnPrewriteResponse);
  rpc TxnCommit(dingodb.pb.store.TxnCommitRequest) returns (dingodb.pb.store.TxnCommitResponse);
  rpc TxnCheckTxnStatus(dingodb.pb.store.TxnCheckTxnStatusRequest) returns (dingodb.pb.store.TxnCheckTxnStatusResponse);
  rpc TxnResolveLock(dingodb.pb.store.TxnResolveLockRequest) returns (dingodb.pb.store.TxnResolveLockResponse);
  rpc TxnBatchRollback(dingodb.pb.store.TxnBatchRollbackRequest) returns (dingodb.pb.store.TxnBatchRollbackResponse);
  rpc TxnHeartBeat(dingodb.pb.store.TxnHeartBeatRequest) returns (dingodb.pb.store.TxnHeartBeatResponse);
  rpc TxnGc(dingodb.pb.store.TxnGcRequest) returns (dingodb.pb.store.TxnGcResponse);
  rpc TxnDeleteRange(dingodb.pb.store.TxnDeleteRangeRequest) returns (dingodb.pb.store.TxnDeleteRangeResponse);
};
