// Copyright (c) 2023 dingodb.com, Inc. All Rights Reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "common.proto";
import "error.proto";

package dingodb.pb.index;

option java_package = "io.dingodb.index";
option cc_generic_services = true;

message VectorAddRequest {
  uint64 region_id = 1;
  repeated dingodb.pb.common.VectorWithId vectors = 2;
  bool replace_deleted = 3;
  bool is_update = 4;
}

message VectorAddResponse {
  dingodb.pb.error.Error error = 1;
}

message VectorBatchQueryRequest {
  uint64 region_id = 1;
  repeated uint64 vector_ids = 2;
  bool without_vector_data = 3;       // Default false, if true, response without vector data.
  bool with_scalar_data = 4;          // Default false, if true, response with scalar data.
  repeated string selected_keys = 5;  // If with_scalar_data is true, selected_keys is used to select scalar data, if
                                      // this parameter is null, all scalar data will be returned.
}

message VectorBatchQueryResponse {
  dingodb.pb.error.Error error = 1;
  repeated dingodb.pb.common.VectorWithId vectors = 2;
}

// vector.id > 0: exact query
// vector.id == 0: similarity search with vector.vector
message VectorSearchRequest {
  uint64 region_id = 1;
  dingodb.pb.common.VectorWithId vector = 2;
  dingodb.pb.common.VectorSearchParameter parameter = 3;
}

message VectorSearchResponse {
  dingodb.pb.error.Error error = 1;
  repeated dingodb.pb.common.VectorWithDistance results = 2;
}

message VectorDeleteRequest {
  uint64 region_id = 1;
  repeated uint64 ids = 2;
}

message VectorDeleteResponse {
  dingodb.pb.error.Error error = 1;
}

message VectorGetBorderIdRequest {
  uint64 region_id = 1;
  bool get_min = 2;  // if true, get min id, else get max id
}

message VectorGetBorderIdResponse {
  dingodb.pb.error.Error error = 1;
  uint64 id = 2;
}

service IndexService {
  // vector index
  rpc VectorAdd(VectorAddRequest) returns (VectorAddResponse);
  rpc VectorBatchQuery(VectorBatchQueryRequest) returns (VectorBatchQueryResponse);
  rpc VectorSearch(VectorSearchRequest) returns (VectorSearchResponse);
  rpc VectorDelete(VectorDeleteRequest) returns (VectorDeleteResponse);
  rpc VectorGetBorderId(VectorGetBorderIdRequest) returns (VectorGetBorderIdResponse);
};
