// Copyright (c) 2023 dingodb.com, Inc. All Rights Reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "common.proto";
import "error.proto";
import "store.proto";

package dingodb.pb.index;

option java_package = "io.dingodb.index";
option cc_generic_services = true;

message VectorAddRequest {
  dingodb.pb.common.RequestInfo request_info = 1;
  dingodb.pb.store.Context context = 2;
  repeated dingodb.pb.common.VectorWithId vectors = 3;
  bool replace_deleted = 4;
  bool is_update = 5;
}

message VectorAddResponse {
  dingodb.pb.common.ResponseInfo response_info = 1;
  dingodb.pb.error.Error error = 2;
  // return the execution status of each key
  // key_states[index] = true, add success
  // key_states[index] = false, add failed
  repeated bool key_states = 3;
}

message VectorBatchQueryRequest {
  dingodb.pb.common.RequestInfo request_info = 1;
  dingodb.pb.store.Context context = 2;
  repeated int64 vector_ids = 3;
  bool without_vector_data = 4;       // Default false, if true, response without vector data.
  bool without_scalar_data = 5;       // Default false, if true, response without scalar data.
  repeated string selected_keys = 6;  // If without_scalar_data is false, selected_keys is used to select scalar data,
                                      // if this parameter is null, all scalar data will be returned.
  bool without_table_data = 7;        // Default false, if true, response without table data.
}

message VectorBatchQueryResponse {
  dingodb.pb.common.ResponseInfo response_info = 1;
  dingodb.pb.error.Error error = 2;
  repeated dingodb.pb.common.VectorWithId vectors = 3;
}

message VectorScanQueryRequest {
  dingodb.pb.common.RequestInfo request_info = 1;
  dingodb.pb.store.Context context = 2;
  int64 vector_id_start = 3;
  bool is_reverse_scan = 4;
  int64 max_scan_count = 5;  // the max count user want to scan
  int64 vector_id_end = 6;   // the end id of scan, if is_reverse_scan is true, vector_id_end must be less than
                             // vector_id_start, if is_reverse_scan is false, vector_id_end must be greater than
                             // vector_id_start
                             // the real range is [start, end], include start and end
                             // if vector_id_end == 0, scan to the end of the region

  bool without_vector_data = 11;       // Default false, if true, response without vector data.
  bool without_scalar_data = 12;       // Default false, if true, response without scalar data.
  repeated string selected_keys = 13;  // If without_scalar_data is false, selected_keys is used to select scalar data,
                                       // if this parameter is null, all scalar data will be returned.
  bool without_table_data = 14;        // Default false, if true, response without table data.

  // Whether to use scalar filtering.
  bool use_scalar_filter = 20;
  dingodb.pb.common.VectorScalardata scalar_for_filter = 21;
}

message VectorScanQueryResponse {
  dingodb.pb.common.ResponseInfo response_info = 1;
  dingodb.pb.error.Error error = 2;
  repeated dingodb.pb.common.VectorWithId vectors = 3;
}

message VectorGetRegionMetricsRequest {
  dingodb.pb.common.RequestInfo request_info = 1;
  dingodb.pb.store.Context context = 2;
}

message VectorGetRegionMetricsResponse {
  dingodb.pb.common.ResponseInfo response_info = 1;
  dingodb.pb.error.Error error = 2;
  dingodb.pb.common.VectorIndexMetrics metrics = 3;
}

message VectorSearchRequest {
  dingodb.pb.common.RequestInfo request_info = 1;
  dingodb.pb.store.Context context = 2;
  dingodb.pb.common.VectorSearchParameter parameter = 3;
  repeated dingodb.pb.common.VectorWithId vector_with_ids = 4;  // this field is used for batch search
}

message VectorWithDistanceResult {
  repeated dingodb.pb.common.VectorWithDistance vector_with_distances = 1;
}

message VectorSearchResponse {
  dingodb.pb.common.ResponseInfo response_info = 1;
  dingodb.pb.error.Error error = 2;
  repeated VectorWithDistanceResult batch_results = 3;  // this field is used for batch search
}

message VectorDeleteRequest {
  dingodb.pb.common.RequestInfo request_info = 1;
  dingodb.pb.store.Context context = 2;
  repeated int64 ids = 3;
}

message VectorDeleteResponse {
  dingodb.pb.common.ResponseInfo response_info = 1;
  dingodb.pb.error.Error error = 2;
  // return the execution status of each key
  // key_states[index] = true, delete success
  // key_states[index] = false, key not exist
  repeated bool key_states = 3;
}

message VectorGetBorderIdRequest {
  dingodb.pb.common.RequestInfo request_info = 1;
  dingodb.pb.store.Context context = 2;
  bool get_min = 3;  // if true, get min id, else get max id
}

message VectorGetBorderIdResponse {
  dingodb.pb.common.ResponseInfo response_info = 1;
  dingodb.pb.error.Error error = 2;
  int64 id = 3;
}

enum AlgorithmType {
  ALGORITHM_NONE = 0;
  ALGORITHM_FAISS = 1;
  ALGORITHM_HNSWLIB = 2;
}

message VectorCalcDistanceRequest {
  dingodb.pb.common.RequestInfo request_info = 1;

  // which library algorithm to use
  AlgorithmType algorithm_type = 2;

  // must be valid
  dingodb.pb.common.MetricType metric_type = 3;

  // target vector arrays . empty do nothing. no error.
  repeated dingodb.pb.common.Vector op_left_vectors = 4;

  // source vector arrays . empty do nothing. no error.
  repeated dingodb.pb.common.Vector op_right_vectors = 5;

  // whether to return the normalized result.
  bool is_return_normlize = 6;
}

message VectorDistance {
  repeated float internal_distances = 1;
}

message VectorCalcDistanceResponse {
  dingodb.pb.common.ResponseInfo response_info = 1;
  dingodb.pb.error.Error error = 2;

  // return normalized result if is_return_normlize is true
  repeated dingodb.pb.common.Vector op_left_vectors = 3;

  // return normalized result if is_return_normlize is true
  repeated dingodb.pb.common.Vector op_right_vectors = 4;

  // num distance values = op_left_vectors *  op_right_vectors
  repeated VectorDistance distances = 5;
}

// vector.id > 0: exact query
// vector.id == 0: similarity search with vector.vector
message VectorSearchDebugRequest {
  dingodb.pb.common.RequestInfo request_info = 1;
  dingodb.pb.store.Context context = 2;

  dingodb.pb.common.VectorWithId vector = 3;
  dingodb.pb.common.VectorSearchParameter parameter = 4;
  repeated dingodb.pb.common.VectorWithId vector_with_ids = 5;  // this field is used for batch search
}

message VectorSearchDebugResponse {
  dingodb.pb.common.ResponseInfo response_info = 1;
  dingodb.pb.error.Error error = 2;
  repeated dingodb.pb.common.VectorWithDistance results = 3;
  repeated VectorWithDistanceResult batch_results = 4;  // this field is used for batch search

  // scalar scan time unit  microsecond 10 -6 s
  int64 deserialization_id_time_us = 5;

  // scalar scan time unit  microsecond 10 -6 s
  int64 scan_scalar_time_us = 6;

  // search  vector unit  microsecond 10 -6 s
  int64 search_time_us = 7;
}

message VectorCountRequest {
  dingodb.pb.common.RequestInfo request_info = 1;
  dingodb.pb.store.Context context = 2;
  // [vector_id_start, vector_id_end)
  int64 vector_id_start = 3;  // default region range start_key
  int64 vector_id_end = 4;    // default region range end_key, not include
}

message VectorCountResponse {
  dingodb.pb.common.ResponseInfo response_info = 1;
  dingodb.pb.error.Error error = 2;
  int64 count = 3;
}

message VectorGetParameter {
  // the parameter below is inherited from VectorBatchQueryRequest
  bool without_vector_data = 1;       // Default false, if true, response without vector data.
  bool without_scalar_data = 2;       // Default false, if true, response without scalar data.
  repeated string selected_keys = 3;  // If without_scalar_data is false, selected_keys is used to select scalar data,
                                      // if this parameter is null, all scalar data will be returned.
  bool without_table_data = 4;        // Default false, if true, response without table data.
}

message HelloRequest {
  dingodb.pb.common.RequestInfo request_info = 1;
  dingodb.pb.store.Context context = 2;
  bool get_region_metrics = 3;
  bool is_just_version_info = 4;
}

message HelloResponse {
  // response info
  dingodb.pb.common.ResponseInfo response_info = 1;
  // error code
  dingodb.pb.error.Error error = 2;
  int64 region_count = 3;
  int64 region_leader_count = 4;
  repeated dingodb.pb.common.RegionMetrics region_metrics = 5;
  dingodb.pb.common.VersionInfo version_info = 6;
}

service IndexService {
  rpc Hello(HelloRequest) returns (HelloResponse);
  rpc GetMemoryInfo(HelloRequest) returns (HelloResponse);

  // vector index
  rpc VectorAdd(VectorAddRequest) returns (VectorAddResponse);
  rpc VectorBatchQuery(VectorBatchQueryRequest) returns (VectorBatchQueryResponse);
  rpc VectorSearch(VectorSearchRequest) returns (VectorSearchResponse);
  rpc VectorDelete(VectorDeleteRequest) returns (VectorDeleteResponse);
  rpc VectorGetBorderId(VectorGetBorderIdRequest) returns (VectorGetBorderIdResponse);
  rpc VectorScanQuery(VectorScanQueryRequest) returns (VectorScanQueryResponse);
  rpc VectorGetRegionMetrics(VectorGetRegionMetricsRequest) returns (VectorGetRegionMetricsResponse);
  rpc VectorCount(VectorCountRequest) returns (VectorCountResponse);

  // debug
  // test  vector search performance
  rpc VectorSearchDebug(VectorSearchDebugRequest) returns (VectorSearchDebugResponse);

  // txn rpcs
  rpc TxnGet(dingodb.pb.store.TxnGetRequest) returns (dingodb.pb.store.TxnGetResponse);
  rpc TxnBatchGet(dingodb.pb.store.TxnBatchGetRequest) returns (dingodb.pb.store.TxnBatchGetResponse);
  rpc TxnScan(dingodb.pb.store.TxnScanRequest) returns (dingodb.pb.store.TxnScanResponse);
  rpc TxnScanLock(dingodb.pb.store.TxnScanLockRequest) returns (dingodb.pb.store.TxnScanLockResponse);
  rpc TxnDump(dingodb.pb.store.TxnDumpRequest) returns (dingodb.pb.store.TxnDumpResponse);

  rpc TxnPessimisticLock(dingodb.pb.store.TxnPessimisticLockRequest)
      returns (dingodb.pb.store.TxnPessimisticLockResponse);
  rpc TxnPessimisticRollback(dingodb.pb.store.TxnPessimisticRollbackRequest)
      returns (dingodb.pb.store.TxnPessimisticRollbackResponse);
  rpc TxnPrewrite(dingodb.pb.store.TxnPrewriteRequest) returns (dingodb.pb.store.TxnPrewriteResponse);
  rpc TxnCommit(dingodb.pb.store.TxnCommitRequest) returns (dingodb.pb.store.TxnCommitResponse);
  rpc TxnCheckTxnStatus(dingodb.pb.store.TxnCheckTxnStatusRequest) returns (dingodb.pb.store.TxnCheckTxnStatusResponse);
  rpc TxnResolveLock(dingodb.pb.store.TxnResolveLockRequest) returns (dingodb.pb.store.TxnResolveLockResponse);
  rpc TxnBatchRollback(dingodb.pb.store.TxnBatchRollbackRequest) returns (dingodb.pb.store.TxnBatchRollbackResponse);
  rpc TxnHeartBeat(dingodb.pb.store.TxnHeartBeatRequest) returns (dingodb.pb.store.TxnHeartBeatResponse);
  rpc TxnGc(dingodb.pb.store.TxnGcRequest) returns (dingodb.pb.store.TxnGcResponse);
  rpc TxnDeleteRange(dingodb.pb.store.TxnDeleteRangeRequest) returns (dingodb.pb.store.TxnDeleteRangeResponse);
};
