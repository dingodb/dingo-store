// Copyright (c) 2023 dingodb.com, Inc. All Rights Reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "common.proto";
import "error.proto";

package dingodb.pb.meta;

option java_package = "io.dingodb.meta";
option cc_generic_services = true;

enum EntityType {
  ENTITY_TYPE_SCHEMA = 0;  // schema type
  ENTITY_TYPE_TABLE = 1;   // table type
  ENTITY_TYPE_PART = 2;    // partiton type
  ENTITY_TYPE_INDEX = 3;   // index type, especially for vector index
  ENTITY_TYPE_REGION = 4;  // region type
}

// The id of internal schemas
// internal schema is prebuilt in dingoDB, and can't be created or deleted.
enum ReservedSchemaIds {
  ROOT_SCHEMA = 0;
  META_SCHEMA = 1;
  DINGO_SCHEMA = 2;
  MYSQL_SCHEMA = 3;
  INFORMATION_SCHEMA = 4;
  MAX_INTERNAL_SCHEMA = 1000;  // don't modify this value
}

// The id of internal tables
// internal tables is create using dingoDB client, and can be deleted.
// If a dingodb need to use mysql protocol, it should create mysql internal tables first.
enum ReservedTableIds {
  NONE = 0;
  // mysql internal table use id from 100~200
  MYSQL_USER = 101;
  MYSQL_DB = 102;
  MYSQL_TABLES_PRIV = 103;
  MYSQL_GLOBAL_VARIABLE = 104;
  MAX_INTERNAL_TABLE = 1000;  // don't modify this value
}

// Used for transformation to SDK CommonId
message DingoCommonId {
  EntityType entity_type = 1;
  uint64 parent_entity_id = 2;  // if the entity is table, this field is its schema_id
  uint64 entity_id = 3;
}

/**
 * Column Definition.
 */
message ColumnDefinition {
  string name = 1;
  string sql_type = 2;
  string element_type = 3;
  int32 precision = 4;
  int32 scale = 5;
  bool nullable = 6;
  int32 indexOfKey = 7;
  bool has_default_val = 8;
  string default_val = 9;
  bool is_auto_increment = 10;
}

// Information about Index.
message Index {
  repeated string index_column = 1;
  bool is_unique = 2;
}

// compute partition by columns and operand function.
enum PartitionStrategy {
  PT_STRATEGY_RANGE = 0;
  PT_STRATEGY_HASH = 1;
}

message RangePartition {
  repeated dingodb.pb.common.Range ranges = 1;  // the count of ranges must be equal to the count of id
  repeated DingoCommonId ids = 2;               // this is really part id, its parent entity is table
}

message HashPartition {
  repeated dingodb.pb.common.Range ranges = 1;  // the count of ranges must be equal to the count of id
  repeated DingoCommonId ids = 2;               // this is really part id, its parent entity is table
}

message PartitionRule {
  repeated string columns = 1;
  PartitionStrategy strategy = 2;
  RangePartition range_partition = 3;
  HashPartition hash_partition = 4;
}

// Schema
message Schema {
  DingoCommonId id = 1;
  string name = 2;
  repeated DingoCommonId table_ids = 3;
  repeated DingoCommonId index_ids = 4;
}

// TableDefinition is for SQL
message TableDefinition {
  string name = 1;
  uint32 version = 2;
  uint64 ttl = 3;
  uint64 auto_increment = 4;
  string create_sql = 5;
  PartitionRule table_partition = 20;
  uint32 replica = 21;
  dingodb.pb.common.Engine engine = 22;
  repeated ColumnDefinition columns = 30;
  map<string, string> properties = 40;
  dingodb.pb.common.IndexParameter index_parameter = 41;  // for index
}

// IndexDefinition is for vector/scalar index
message IndexDefinition {
  string name = 1;
  uint32 version = 2;
  PartitionRule index_partition = 3;
  uint32 replica = 4;
  dingodb.pb.common.IndexParameter index_parameter = 5;
  bool with_auto_incrment = 6;  // if true, the index create a auto increment
  uint64 auto_increment = 7;    // auto increment start id
}

// This Part is mainly equal to the Part in DingoDB 0.5.x
message RangeDistribution {
  DingoCommonId id = 1;                            // this is really region id, its parent entity is part_id
  dingodb.pb.common.Range range = 2;               // the range of this part
  dingodb.pb.common.Location leader = 3;           // the leader's store location
  repeated dingodb.pb.common.Location voters = 4;  // all members of the region that have right to vote, this field is
                                                   // equal to the old replicates field of Part.
  repeated dingodb.pb.common.Location learners =
      5;  // all members of the region that is learners, have no right to vote
  uint64 regionmap_epoch = 6;
  uint64 storemap_epoch = 7;
}

// TableRange is used for sdk to get all range distribution of a table.
message TableRange {
  repeated RangeDistribution range_distribution = 2;
}

message IndexRange {
  repeated RangeDistribution range_distribution = 2;
}

// Table metrics for optimization of SQL plan
message TableMetrics {
  uint64 rows_count = 1;
  bytes min_key = 2;
  bytes max_key = 3;
  uint64 part_count = 4;
  uint64 table_size = 5;  // approximate table size in bytes
}

message TableMetricsWithId {
  DingoCommonId id = 1;
  TableMetrics table_metrics = 2;
}

// Index metrics for optimization of SQL plan
message IndexMetrics {
  uint64 rows_count = 1;
  bytes min_key = 2;
  bytes max_key = 3;
  uint64 part_count = 4;

  // vector index type . reserve to do one of for each different algorithm.
  dingodb.pb.common.VectorIndexType vector_index_type = 20;

  // current count
  int64 current_count = 21;

  // deleted count
  int64 deleted_count = 22;

  // max id
  int64 max_id = 23;

  // min id
  int64 min_id = 24;

  // memeory unit bytes
  int64 memory_bytes = 25;
}

message IndexMetricsWithId {
  DingoCommonId id = 1;
  IndexMetrics index_metrics = 2;
}

message TableWithPartCount {
  // has table
  bool has_table = 1;

  // if has table, table`s part count
  uint32 table_part_count = 2;

  // index count, include vector index and scalar index
  uint32 index_count = 3;

  // each index may has different part count, the list size must equal index count
  repeated uint32 index_part_count = 4;
}

message TableIdWithPartIds {
  DingoCommonId table_id = 1;
  repeated DingoCommonId part_ids = 2;
}

message GetSchemasRequest {
  DingoCommonId schema_id = 1;
}

message GetSchemasResponse {
  dingodb.pb.error.Error error = 1;
  repeated Schema schemas = 2;
}

message GetSchemaRequest {
  DingoCommonId schema_id = 1;
}

message GetSchemaResponse {
  dingodb.pb.error.Error error = 1;
  Schema schema = 2;
}

message GetSchemaByNameRequest {
  string schema_name = 1;
}

message GetSchemaByNameResponse {
  dingodb.pb.error.Error error = 1;
  Schema schema = 2;
}

message TableDefinitionWithId {
  DingoCommonId table_id = 1;
  TableDefinition table_definition = 2;
}

message IndexDefinitionWithId {
  DingoCommonId index_id = 1;
  IndexDefinition index_definition = 2;
}

message GetTablesBySchemaRequest {
  DingoCommonId schema_id = 1;
}

message GetTablesBySchemaResponse {
  dingodb.pb.error.Error error = 1;
  repeated TableDefinitionWithId table_definition_with_ids = 2;
}

message GetIndexesRequest {
  DingoCommonId schema_id = 1;
}

message GetIndexesResponse {
  dingodb.pb.error.Error error = 1;
  repeated IndexDefinitionWithId index_definition_with_ids = 2;
}

message GetTablesCountRequest {
  DingoCommonId schema_id = 1;
}

message GetTablesCountResponse {
  dingodb.pb.error.Error error = 1;
  uint64 tables_count = 2;
}

message GetIndexesCountRequest {
  DingoCommonId schema_id = 1;
}

message GetIndexesCountResponse {
  dingodb.pb.error.Error error = 1;
  uint64 indexes_count = 2;
}

message GetTableRequest {
  DingoCommonId table_id = 1;
}

message GetTableResponse {
  dingodb.pb.error.Error error = 1;
  TableDefinitionWithId table_definition_with_id = 2;
}

message GetIndexRequest {
  DingoCommonId index_id = 1;
}

message GetIndexResponse {
  dingodb.pb.error.Error error = 1;
  IndexDefinitionWithId index_definition_with_id = 2;
}

message GetTableByNameRequest {
  DingoCommonId schema_id = 1;
  string table_name = 2;
}

message GetTableByNameResponse {
  dingodb.pb.error.Error error = 1;
  TableDefinitionWithId table_definition_with_id = 2;
}

message GetIndexByNameRequest {
  DingoCommonId schema_id = 1;
  string index_name = 2;
}

message GetIndexByNameResponse {
  dingodb.pb.error.Error error = 1;
  IndexDefinitionWithId index_definition_with_id = 2;
}

message GetTableRangeRequest {
  DingoCommonId table_id = 1;
}

message GetTableRangeResponse {
  dingodb.pb.error.Error error = 1;
  TableRange table_range = 2;
}

message GetIndexRangeRequest {
  DingoCommonId index_id = 1;
}

message GetIndexRangeResponse {
  dingodb.pb.error.Error error = 1;
  IndexRange index_range = 2;
}

message GetTableMetricsRequest {
  DingoCommonId table_id = 1;
}

message GetTableMetricsResponse {
  dingodb.pb.error.Error error = 1;
  TableMetricsWithId table_metrics = 2;
}

message GetIndexMetricsRequest {
  DingoCommonId index_id = 1;
}

message GetIndexMetricsResponse {
  dingodb.pb.error.Error error = 1;
  IndexMetricsWithId index_metrics = 2;
}

message CreateTableIdRequest {
  DingoCommonId schema_id = 1;
}

message CreateTableIdResponse {
  dingodb.pb.error.Error error = 1;
  DingoCommonId table_id = 2;
}

message CreateIndexIdRequest {
  DingoCommonId schema_id = 1;
}

message CreateIndexIdResponse {
  dingodb.pb.error.Error error = 1;
  DingoCommonId index_id = 2;
}

message CreateTableRequest {
  DingoCommonId schema_id = 1;
  DingoCommonId table_id = 2;
  TableDefinition table_definition = 3;
}

message CreateTableResponse {
  dingodb.pb.error.Error error = 1;
  DingoCommonId table_id = 2;
}

message CreateIndexRequest {
  DingoCommonId schema_id = 1;
  DingoCommonId index_id = 2;
  IndexDefinition index_definition = 3;
}

message CreateIndexResponse {
  dingodb.pb.error.Error error = 1;
  DingoCommonId index_id = 2;
}

message UpdateIndexRequest {
  DingoCommonId index_id = 1;
  IndexDefinition new_index_definition = 2;
}

message UpdateIndexResponse {
  dingodb.pb.error.Error error = 1;
}

message CreateSchemaRequest {
  DingoCommonId parent_schema_id = 1;
  string schema_name = 2;
}

message CreateSchemaResponse {
  dingodb.pb.error.Error error = 1;
  Schema schema = 2;
}

message DropSchemaRequest {
  DingoCommonId schema_id = 1;
}

message DropSchemaResponse {
  dingodb.pb.error.Error error = 1;
}

message DropTableRequest {
  DingoCommonId table_id = 1;
}

message DropTableResponse {
  dingodb.pb.error.Error error = 1;
}

message DropIndexRequest {
  DingoCommonId index_id = 1;
}

message DropIndexResponse {
  dingodb.pb.error.Error error = 1;
}

message TableIncrement {
  uint64 table_id = 1;
  uint64 start_id = 2;
}

message GetAutoIncrementsRequest {}

message GetAutoIncrementsResponse {
  dingodb.pb.error.Error error = 1;
  repeated TableIncrement table_increments = 2;
}

message GetAutoIncrementRequest {
  DingoCommonId table_id = 1;
}

message GetAutoIncrementResponse {
  dingodb.pb.error.Error error = 1;
  uint64 start_id = 2;
}

message CreateAutoIncrementRequest {
  DingoCommonId table_id = 1;
  uint64 start_id = 2;
}

message CreateAutoIncrementResponse {
  dingodb.pb.error.Error error = 1;
}

message UpdateAutoIncrementRequest {
  DingoCommonId table_id = 1;
  uint64 start_id = 2;
  bool force = 3;
}

message UpdateAutoIncrementResponse {
  dingodb.pb.error.Error error = 1;
}

message GenerateAutoIncrementRequest {
  DingoCommonId table_id = 1;
  uint64 count = 2;
  uint32 auto_increment_increment = 3;
  uint32 auto_increment_offset = 4;
}

message GenerateAutoIncrementResponse {
  dingodb.pb.error.Error error = 1;
  uint64 start_id = 2;
  uint64 end_id = 3;
}

message DeleteAutoIncrementRequest {
  DingoCommonId table_id = 1;
}

message DeleteAutoIncrementResponse {
  dingodb.pb.error.Error error = 1;
}

// generate table id, vector index id and scalar index id
message GenerateTableIdsRequest {
  DingoCommonId schema_id = 1;
  TableWithPartCount count = 2;
}

message GenerateTableIdsResponse {
  dingodb.pb.error.Error error = 1;
  repeated TableIdWithPartIds ids = 2;
}

// create table, vector index and scalar index
message CreateTablesRequest {
  DingoCommonId schema_id = 1;
  repeated TableDefinitionWithId table_definition_with_ids = 2;
}

message CreateTablesResponse {
  dingodb.pb.error.Error error = 1;
  repeated DingoCommonId table_ids = 2;
}

// get assigned table definition, including vector index and scalar index
message GetTablesRequest {
  DingoCommonId table_id = 1;
}

message GetTablesResponse {
  dingodb.pb.error.Error error = 1;
  repeated TableDefinitionWithId table_definition_with_ids = 2;
}

// drop table, vector index and scalar index
message DropTablesRequest {
  repeated DingoCommonId table_id = 1;
}

message DropTablesResponse {
  dingodb.pb.error.Error error = 1;
}

service MetaService {
  // GetSchemas
  // in: schema_id
  // out: List<Schema>
  rpc GetSchemas(GetSchemasRequest) returns (GetSchemasResponse);

  // GetSchema
  // in: schema_id
  // out: Schema
  rpc GetSchema(GetSchemaRequest) returns (GetSchemaResponse);

  // GetSchemaByName
  // in: schema_name
  // out: Schema
  rpc GetSchemaByName(GetSchemaByNameRequest) returns (GetSchemaByNameResponse);

  // GetTablesBySchema
  // in: schema_id
  // out: List<TableDefinitionWithId>
  rpc GetTablesBySchema(GetTablesBySchemaRequest) returns (GetTablesBySchemaResponse);

  // GetTablesCount
  // in: schema_id
  // out: tables_count
  rpc GetTablesCount(GetTablesCountRequest) returns (GetTablesCountResponse);

  // GetTable
  // in: table_id
  // out: TableDefinitionWithId
  rpc GetTable(GetTableRequest) returns (GetTableResponse);

  // GetTableByName
  // in: table_id
  // out: TableDefinitionWithId
  rpc GetTableByName(GetTableByNameRequest) returns (GetTableByNameResponse);

  // GetTableRange
  // in: table_id
  // out: TableRange
  rpc GetTableRange(GetTableRangeRequest) returns (GetTableRangeResponse);

  // GetTableMetrics
  // in: table_id
  // out: table_metrics
  rpc GetTableMetrics(GetTableMetricsRequest) returns (GetTableMetricsResponse);

  // CreateTableId
  // in: schema_id
  // out: table_id
  rpc CreateTableId(CreateTableIdRequest) returns (CreateTableIdResponse);

  // CreateTable
  // in: schema_id table_id TableDefinition
  //      if table_id is specified, use given table_id, else create new table_id
  // out: table_id
  rpc CreateTable(CreateTableRequest) returns (CreateTableResponse);

  // DropTable
  // in: schema_id table_id
  // out: {}
  rpc DropTable(DropTableRequest) returns (DropTableResponse);

  // GenerateTableIds
  // in: schema_id count
  // out: List<DingoCommonId>
  rpc GenerateTableIds(GenerateTableIdsRequest) returns (GenerateTableIdsResponse);

  // CreateTables
  // in: schema_id List<TableDefinitionWithId>
  // out: List<DingoCommonId>
  rpc CreateTables(CreateTablesRequest) returns (CreateTablesResponse);

  // GetTables
  // in: schema_id table_id
  // out: List<DingoCommonId>
  rpc GetTables(GetTablesRequest) returns (GetTablesResponse);

  // DropTables
  // in: table_id
  // out: {}
  rpc DropTables(DropTablesRequest) returns (DropTablesResponse);

  // GetIndexes
  // in: schema_id
  // out: List<IndexDefinitionWithId>
  rpc GetIndexes(GetIndexesRequest) returns (GetIndexesResponse);

  // GetIndexesCount
  // in: schema_id
  // out: tables_count
  rpc GetIndexesCount(GetIndexesCountRequest) returns (GetIndexesCountResponse);

  // GetIndex
  // in: table_id
  // out: IndexDefinitionWithId
  rpc GetIndex(GetIndexRequest) returns (GetIndexResponse);

  // GetIndexByName
  // in: table_id
  // out: IndexDefinitionWithId
  rpc GetIndexByName(GetIndexByNameRequest) returns (GetIndexByNameResponse);

  // GetIndexRange
  // in: table_id
  // out: IndexRange
  rpc GetIndexRange(GetIndexRangeRequest) returns (GetIndexRangeResponse);

  // GetIndexMetrics
  // in: table_id
  // out: table_metrics
  rpc GetIndexMetrics(GetIndexMetricsRequest) returns (GetIndexMetricsResponse);

  // CreateIndexId
  // in: schema_id
  // out: index_id
  rpc CreateIndexId(CreateIndexIdRequest) returns (CreateIndexIdResponse);

  // CreateIndex
  // in: schema_id index_id IndexDefinition
  //      if index_id is specified, use given index_id, else create new index_id
  // out: index_id
  rpc CreateIndex(CreateIndexRequest) returns (CreateIndexResponse);

  // UpdateIndex
  // in: index_id IndexDefinition
  // out: {}
  rpc UpdateIndex(UpdateIndexRequest) returns (UpdateIndexResponse);

  // DropIndex
  // in: schema_id table_id
  // out: {}
  rpc DropIndex(DropIndexRequest) returns (DropIndexResponse);

  // CreateSchema
  // in: parent_schema_id schema_name
  // out: Schema
  rpc CreateSchema(CreateSchemaRequest) returns (CreateSchemaResponse);

  // DropSchema
  // in: parent_schema_id schema_name
  // out: Schema
  rpc DropSchema(DropSchemaRequest) returns (DropSchemaResponse);

  // GetAutoIncrements
  // out: list of table_id, start_id
  rpc GetAutoIncrements(GetAutoIncrementsRequest) returns (GetAutoIncrementsResponse);

  // GetAutoIncrement
  // in: table_id
  // out: start_id
  rpc GetAutoIncrement(GetAutoIncrementRequest) returns (GetAutoIncrementResponse);

  // CreateAutoIncrement
  // in: table_id start_id
  // out: error code
  rpc CreateAutoIncrement(CreateAutoIncrementRequest) returns (CreateAutoIncrementResponse);

  // UpdateAutoIncrement
  // in: table_id start_id force
  // out: error code
  rpc UpdateAutoIncrement(UpdateAutoIncrementRequest) returns (UpdateAutoIncrementResponse);

  // GenerateAutoIncrement
  // in: table_id count auto_increment_increment auto_increment_offset
  // out: start_id, end_id
  rpc GenerateAutoIncrement(GenerateAutoIncrementRequest) returns (GenerateAutoIncrementResponse);

  // DeleteAutoIncrement
  // in: table_id
  // out: error code
  rpc DeleteAutoIncrement(DeleteAutoIncrementRequest) returns (DeleteAutoIncrementResponse);

  // TODO
  // Operation about User, such as create/drop/grant.

  // Operation about Metrics
}
