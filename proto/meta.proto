// Copyright (c) 2023 dingodb.com, Inc. All Rights Reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "error.proto";
import "common.proto";
import "coordinator.proto";

package dingodb.pb.meta;

option java_package = "io.dingodb.meta";
option cc_generic_services = true;

enum EntityType {
  ENTITY_TYPE_SCHEMA = 0;  // schema type
  ENTITY_TYPE_TABLE = 1;   // table type
  ENTITY_TYPE_PART = 2;    // partiton type
  ENTITY_TYPE_INDEX = 3;   // index type, especially for vector index
  ENTITY_TYPE_REGION = 4;  // region type
}

// The id of internal schemas
// internal schema is prebuilt in dingoDB, and can't be created or deleted.
enum ReservedSchemaIds {
  ROOT_SCHEMA = 0;
  META_SCHEMA = 1;
  DINGO_SCHEMA = 2;
  MYSQL_SCHEMA = 3;
  INFORMATION_SCHEMA = 4;
  MAX_INTERNAL_SCHEMA = 1000;  // don't modify this value
}

// The id of internal tables
// internal tables is create using dingoDB client, and can be deleted.
// If a dingodb need to use mysql protocol, it should create mysql internal tables first.
enum ReservedTableIds {
  NONE = 0;
  // mysql internal table use id from 100~200
  MYSQL_USER = 101;
  MYSQL_DB = 102;
  MYSQL_TABLES_PRIV = 103;
  MYSQL_GLOBAL_VARIABLE = 104;
  MAX_INTERNAL_TABLE = 1000;  // don't modify this value
}

// Used for transformation to SDK CommonId
message DingoCommonId {
  EntityType entity_type = 1;
  int64 parent_entity_id = 2;  // if the entity is table, this field is its schema_id
  int64 entity_id = 3;
}

/**
 * Column Definition.
 */
message ColumnDefinition {
  string name = 1;
  string sql_type = 2;
  string element_type = 3;
  int32 precision = 4;
  int32 scale = 5;
  bool nullable = 6;
  int32 indexOfKey = 7;
  bool has_default_val = 8;
  string default_val = 9;
  bool is_auto_increment = 10;

  int32 state = 20;

  string comment = 30;
}

// Information about Index.
message Index {
  repeated string index_column = 1;
  bool is_unique = 2;
}

// compute partition by columns and operand function.
enum PartitionStrategy {
  PT_STRATEGY_RANGE = 0;
  PT_STRATEGY_HASH = 1;
}

message RangePartition {
  repeated dingodb.pb.common.Range ranges = 1;  // the count of ranges must be equal to the count of id
  repeated DingoCommonId ids = 2;               // this is really part id, its parent entity is table
}

message HashPartition {
  repeated dingodb.pb.common.Range ranges = 1;  // the count of ranges must be equal to the count of id
  repeated DingoCommonId ids = 2;               // this is really part id, its parent entity is table
}

message Partition {
  DingoCommonId id = 1;               // this is really part id, its parent entity is table
  dingodb.pb.common.Range range = 2;  // the count of ranges must be equal to the count of id
}

message PartitionRule {
  repeated string columns = 1;
  PartitionStrategy strategy = 2;
  repeated Partition partitions = 10;
}

// Tenant
message Tenant {
  int64 id = 1;  // this is the tenant id, it's updated by coordinator
  string name = 2;
  string comment = 3;
  int64 create_timestamp = 10;  // this field is updated by coordinator
  int64 update_timestamp = 11;  // this field is updated by coordinator
  int64 delete_timestamp = 12;  // this field is updated by coordinator

  int64 safe_point_ts = 20;
  int64 revision = 21;
}

// Schema
message Schema {
  DingoCommonId id = 1;
  string name = 2;
  repeated DingoCommonId table_ids = 3;
  repeated DingoCommonId index_ids = 4;
  int64 revision = 10;
  int64 tenant_id = 11;
}

// TableDefinition is for SQL
message TableDefinition {
  string name = 1;
  uint32 version = 2;
  int64 ttl = 3;
  int64 auto_increment = 4;
  string create_sql = 5;
  string charset = 6;
  string collate = 7;

  PartitionRule table_partition = 20;
  uint32 replica = 21;
  dingodb.pb.common.Engine engine = 22;

  repeated ColumnDefinition columns = 30;

  map<string, string> properties = 40;
  dingodb.pb.common.IndexParameter index_parameter = 41;  // for index

  int64 create_timestamp = 51;
  int64 update_timestamp = 52;
  int64 delete_timestamp = 53;

  string comment = 60;
  string table_type = 61;
  string row_format = 62;

  int64 revision = 100;
}

// IndexDefinition is for vector/scalar index
message IndexDefinition {
  string name = 1;
  uint32 version = 2;
  PartitionRule index_partition = 3;
  uint32 replica = 4;
  dingodb.pb.common.IndexParameter index_parameter = 5;
  bool with_auto_incrment = 6;  // if true, the index create a auto increment
  int64 auto_increment = 7;     // auto increment start id
  dingodb.pb.common.Engine engine = 8;

  int64 revision = 20;
}

message RegionStatus {
  // RegionState
  // REGION_NEW: the region is creating, wait for store to finish the creation
  // REGION_NORMAL: the region is normal and can serve all request
  // other status refer to common.proto
  dingodb.pb.common.RegionState state = 1;
  // RegionRaftStatus
  // this status describe the data constistency of the raft region
  dingodb.pb.common.RegionRaftStatus raft_status = 2;
  // ReplicaStatus
  // this status describe the data safety of the raft region
  // if this region is degraded, it means one or more replica is down
  dingodb.pb.common.ReplicaStatus replica_status = 3;
  // RegionHeartbeatState
  // REGION_ONLINE: the leader of this region is online
  // REGION_DOWN: the leader of this region cannot heartbeat to coordinator
  dingodb.pb.common.RegionHeartbeatState heartbeat_state = 4;
  // RegionType
  // describe this region is a store region or index region
  // for table, the region is store
  // for index, the region is index (including vector index and scalar index)
  dingodb.pb.common.RegionType region_type = 5;
  // the create timestamp in ms of region
  int64 create_timestamp = 10;
  // the last update(heartbeat) timestamp in ms of region
  int64 last_update_timestamp = 11;
}

// This Part is mainly equal to the Part in DingoDB 0.5.x
message RangeDistribution {
  // this is really region id, its parent entity is part_id
  DingoCommonId id = 1;
  // the range of this part
  dingodb.pb.common.Range range = 2;
  // the leader's store location
  dingodb.pb.common.Location leader = 3;
  // all members of the region that have right to vote, this field is
  // equal to the old replicates field of Part.
  repeated dingodb.pb.common.Location voters = 4;
  // all members of the region that is learners, have no right to vote
  repeated dingodb.pb.common.Location learners = 5;
  int64 regionmap_epoch = 6;
  int64 storemap_epoch = 7;
  // region_epoch is used to check whether the region info is stale
  dingodb.pb.common.RegionEpoch region_epoch = 8;
  // RegionStatus
  RegionStatus status = 9;
}

// TableRange is used for sdk to get all range distribution of a table.
message TableRange {
  repeated RangeDistribution range_distribution = 2;
}

message IndexRange {
  repeated RangeDistribution range_distribution = 2;
}

// Table metrics for optimization of SQL plan
message TableMetrics {
  int64 rows_count = 1;
  bytes min_key = 2;
  bytes max_key = 3;
  int64 part_count = 4;
  int64 table_size = 5;  // approximate table size in bytes
}

message TableMetricsWithId {
  DingoCommonId id = 1;
  TableMetrics table_metrics = 2;
}

// Index metrics for optimization of SQL plan
message IndexMetrics {
  int64 rows_count = 1;
  bytes min_key = 2;
  bytes max_key = 3;
  int64 part_count = 4;

  // vector index type . reserve to do one of for each different algorithm.
  dingodb.pb.common.VectorIndexType vector_index_type = 20;

  // current count
  int64 current_count = 21;

  // deleted count
  int64 deleted_count = 22;

  // max id
  int64 max_id = 23;

  // min id
  int64 min_id = 24;

  // memeory unit bytes
  int64 memory_bytes = 25;
}

message IndexMetricsWithId {
  DingoCommonId id = 1;
  IndexMetrics index_metrics = 2;
}

message TableWithPartCount {
  // has table
  bool has_table = 1;

  // if has table, table`s part count
  uint32 table_part_count = 2;

  // index count, include vector index and scalar index
  uint32 index_count = 3;

  // each index may has different part count, the list size must equal index count
  repeated uint32 index_part_count = 4;
}

message TableIdWithPartIds {
  DingoCommonId table_id = 1;
  repeated DingoCommonId part_ids = 2;
}

message GetSchemasRequest {
  dingodb.pb.common.RequestInfo request_info = 1;
  DingoCommonId schema_id = 2;
  int64 tenant_id = 3;
}

message GetSchemasResponse {
  dingodb.pb.common.ResponseInfo response_info = 1;
  dingodb.pb.error.Error error = 2;
  repeated Schema schemas = 3;
}

message GetSchemaRequest {
  dingodb.pb.common.RequestInfo request_info = 1;
  DingoCommonId schema_id = 2;
  int64 tenant_id = 3;
}

message GetSchemaResponse {
  dingodb.pb.common.ResponseInfo response_info = 1;
  dingodb.pb.error.Error error = 2;
  Schema schema = 3;
}

message GetSchemaByNameRequest {
  dingodb.pb.common.RequestInfo request_info = 1;
  string schema_name = 2;
  int64 tenant_id = 3;
}

message GetSchemaByNameResponse {
  dingodb.pb.common.ResponseInfo response_info = 1;
  dingodb.pb.error.Error error = 2;
  Schema schema = 3;
}

message TableDefinitionWithId {
  DingoCommonId table_id = 1;
  TableDefinition table_definition = 2;
  int64 tenant_id = 3;
}

message IndexDefinitionWithId {
  DingoCommonId index_id = 1;
  IndexDefinition index_definition = 2;
  int64 tenant_id = 3;
}

message GetTablesBySchemaRequest {
  dingodb.pb.common.RequestInfo request_info = 1;
  DingoCommonId schema_id = 2;
}

message GetTablesBySchemaResponse {
  dingodb.pb.common.ResponseInfo response_info = 1;
  dingodb.pb.error.Error error = 2;
  repeated TableDefinitionWithId table_definition_with_ids = 3;
}

message GetIndexesRequest {
  dingodb.pb.common.RequestInfo request_info = 1;
  DingoCommonId schema_id = 2;
}

message GetIndexesResponse {
  dingodb.pb.common.ResponseInfo response_info = 1;
  dingodb.pb.error.Error error = 2;
  repeated IndexDefinitionWithId index_definition_with_ids = 3;
}

message GetTablesCountRequest {
  dingodb.pb.common.RequestInfo request_info = 1;
  DingoCommonId schema_id = 2;
}

message GetTablesCountResponse {
  dingodb.pb.common.ResponseInfo response_info = 1;
  dingodb.pb.error.Error error = 2;
  int64 tables_count = 3;
}

message GetIndexesCountRequest {
  dingodb.pb.common.RequestInfo request_info = 1;
  DingoCommonId schema_id = 2;
}

message GetIndexesCountResponse {
  dingodb.pb.common.ResponseInfo response_info = 1;
  dingodb.pb.error.Error error = 2;
  int64 indexes_count = 3;
}

message GetTableRequest {
  dingodb.pb.common.RequestInfo request_info = 1;
  DingoCommonId table_id = 2;
}

message GetTableResponse {
  dingodb.pb.common.ResponseInfo response_info = 1;
  dingodb.pb.error.Error error = 2;
  TableDefinitionWithId table_definition_with_id = 3;
}

message GetIndexRequest {
  dingodb.pb.common.RequestInfo request_info = 1;
  DingoCommonId index_id = 2;
}

message GetIndexResponse {
  dingodb.pb.common.ResponseInfo response_info = 1;
  dingodb.pb.error.Error error = 2;
  IndexDefinitionWithId index_definition_with_id = 3;
}

message GetTableByNameRequest {
  dingodb.pb.common.RequestInfo request_info = 1;
  DingoCommonId schema_id = 2;
  string table_name = 3;
}

message GetTableByNameResponse {
  dingodb.pb.common.ResponseInfo response_info = 1;
  dingodb.pb.error.Error error = 2;
  TableDefinitionWithId table_definition_with_id = 3;
}

message GetIndexByNameRequest {
  dingodb.pb.common.RequestInfo request_info = 1;
  DingoCommonId schema_id = 2;
  string index_name = 3;
}

message GetIndexByNameResponse {
  dingodb.pb.common.ResponseInfo response_info = 1;
  dingodb.pb.error.Error error = 2;
  IndexDefinitionWithId index_definition_with_id = 3;
}

message GetTableRangeRequest {
  dingodb.pb.common.RequestInfo request_info = 1;
  DingoCommonId table_id = 2;
}

message GetTableRangeResponse {
  dingodb.pb.common.ResponseInfo response_info = 1;
  dingodb.pb.error.Error error = 2;
  TableRange table_range = 3;
}

message GetIndexRangeRequest {
  dingodb.pb.common.RequestInfo request_info = 1;
  DingoCommonId index_id = 2;
}

message GetIndexRangeResponse {
  dingodb.pb.common.ResponseInfo response_info = 1;
  dingodb.pb.error.Error error = 2;
  IndexRange index_range = 3;
}

message GetTableMetricsRequest {
  dingodb.pb.common.RequestInfo request_info = 1;
  DingoCommonId table_id = 2;
}

message GetTableMetricsResponse {
  dingodb.pb.common.ResponseInfo response_info = 1;
  dingodb.pb.error.Error error = 2;
  TableMetricsWithId table_metrics = 3;
}

message GetIndexMetricsRequest {
  dingodb.pb.common.RequestInfo request_info = 1;
  DingoCommonId index_id = 2;
}

message GetIndexMetricsResponse {
  dingodb.pb.common.ResponseInfo response_info = 1;
  dingodb.pb.error.Error error = 2;
  IndexMetricsWithId index_metrics = 3;
}

message CreateTableIdRequest {
  dingodb.pb.common.RequestInfo request_info = 1;
  DingoCommonId schema_id = 2;
}

message CreateTableIdResponse {
  dingodb.pb.common.ResponseInfo response_info = 1;
  dingodb.pb.error.Error error = 2;
  DingoCommonId table_id = 3;
}

message CreateTableIdsRequest {
  dingodb.pb.common.RequestInfo request_info = 1;
  DingoCommonId schema_id = 2;
  int64 count = 3;
}

message CreateTableIdsResponse {
  dingodb.pb.common.ResponseInfo response_info = 1;
  dingodb.pb.error.Error error = 2;
  repeated DingoCommonId table_ids = 3;
}

message CreateIndexIdRequest {
  dingodb.pb.common.RequestInfo request_info = 1;
  DingoCommonId schema_id = 2;
}

message CreateIndexIdResponse {
  dingodb.pb.common.ResponseInfo response_info = 1;
  dingodb.pb.error.Error error = 2;
  DingoCommonId index_id = 3;
}

message CreateTableRequest {
  dingodb.pb.common.RequestInfo request_info = 1;
  DingoCommonId schema_id = 2;
  DingoCommonId table_id = 3;
  TableDefinition table_definition = 4;
}

message CreateTableResponse {
  dingodb.pb.common.ResponseInfo response_info = 1;
  dingodb.pb.error.Error error = 2;
  DingoCommonId table_id = 3;
}

message CreateIndexRequest {
  dingodb.pb.common.RequestInfo request_info = 1;
  DingoCommonId schema_id = 2;
  DingoCommonId index_id = 3;
  IndexDefinition index_definition = 4;
}

message CreateIndexResponse {
  dingodb.pb.common.ResponseInfo response_info = 1;
  dingodb.pb.error.Error error = 2;
  DingoCommonId index_id = 3;
}

message UpdateIndexRequest {
  dingodb.pb.common.RequestInfo request_info = 1;
  DingoCommonId index_id = 2;
  IndexDefinition new_index_definition = 3;
}

message UpdateIndexResponse {
  dingodb.pb.common.ResponseInfo response_info = 1;
  dingodb.pb.error.Error error = 2;
}

message CreateSchemaRequest {
  dingodb.pb.common.RequestInfo request_info = 1;
  DingoCommonId parent_schema_id = 2;
  string schema_name = 3;
  int64 tenant_id = 4;
}

message CreateSchemaResponse {
  dingodb.pb.common.ResponseInfo response_info = 1;
  dingodb.pb.error.Error error = 2;
  Schema schema = 3;
}

message DropSchemaRequest {
  dingodb.pb.common.RequestInfo request_info = 1;
  DingoCommonId schema_id = 2;
  int64 tenant_id = 3;
}

message DropSchemaResponse {
  dingodb.pb.common.ResponseInfo response_info = 1;
  dingodb.pb.error.Error error = 2;
}

message DropTableRequest {
  dingodb.pb.common.RequestInfo request_info = 1;
  DingoCommonId table_id = 2;
}

message DropTableResponse {
  dingodb.pb.common.ResponseInfo response_info = 1;
  dingodb.pb.error.Error error = 2;
}

message DropIndexRequest {
  dingodb.pb.common.RequestInfo request_info = 1;
  DingoCommonId index_id = 2;
}

message DropIndexResponse {
  dingodb.pb.common.ResponseInfo response_info = 1;
  dingodb.pb.error.Error error = 2;
}

message TableIncrement {
  int64 table_id = 1;
  int64 start_id = 2;
}

message GetAutoIncrementsRequest {
  dingodb.pb.common.RequestInfo request_info = 1;
}

message GetAutoIncrementsResponse {
  dingodb.pb.common.ResponseInfo response_info = 1;
  dingodb.pb.error.Error error = 2;
  repeated TableIncrement table_increments = 3;
}

message GetAutoIncrementRequest {
  dingodb.pb.common.RequestInfo request_info = 1;
  DingoCommonId table_id = 2;
}

message GetAutoIncrementResponse {
  dingodb.pb.common.ResponseInfo response_info = 1;
  dingodb.pb.error.Error error = 2;
  int64 start_id = 3;
}

message CreateAutoIncrementRequest {
  dingodb.pb.common.RequestInfo request_info = 1;
  DingoCommonId table_id = 2;
  int64 start_id = 3;
}

message CreateAutoIncrementResponse {
  dingodb.pb.common.ResponseInfo response_info = 1;
  dingodb.pb.error.Error error = 2;
}

message UpdateAutoIncrementRequest {
  dingodb.pb.common.RequestInfo request_info = 1;
  DingoCommonId table_id = 2;
  int64 start_id = 3;
  bool force = 4;
}

message UpdateAutoIncrementResponse {
  dingodb.pb.common.ResponseInfo response_info = 1;
  dingodb.pb.error.Error error = 2;
}

message GenerateAutoIncrementRequest {
  dingodb.pb.common.RequestInfo request_info = 1;
  DingoCommonId table_id = 2;
  int64 count = 3;
  uint32 auto_increment_increment = 4;
  uint32 auto_increment_offset = 5;
}

message GenerateAutoIncrementResponse {
  dingodb.pb.common.ResponseInfo response_info = 1;
  dingodb.pb.error.Error error = 2;
  int64 start_id = 3;
  int64 end_id = 4;
}

message DeleteAutoIncrementRequest {
  dingodb.pb.common.RequestInfo request_info = 1;
  DingoCommonId table_id = 2;
}

message DeleteAutoIncrementResponse {
  dingodb.pb.common.ResponseInfo response_info = 1;
  dingodb.pb.error.Error error = 2;
}

// generate table id, vector index id and scalar index id
message GenerateTableIdsRequest {
  dingodb.pb.common.RequestInfo request_info = 1;
  DingoCommonId schema_id = 2;
  TableWithPartCount count = 3;
}

message GenerateTableIdsResponse {
  dingodb.pb.common.ResponseInfo response_info = 1;
  dingodb.pb.error.Error error = 2;
  repeated TableIdWithPartIds ids = 3;
}

// create table, vector index and scalar index
message CreateTablesRequest {
  dingodb.pb.common.RequestInfo request_info = 1;
  DingoCommonId schema_id = 2;
  repeated TableDefinitionWithId table_definition_with_ids = 3;
}

message CreateTablesResponse {
  dingodb.pb.common.ResponseInfo response_info = 1;
  dingodb.pb.error.Error error = 2;
  repeated DingoCommonId table_ids = 3;
}

message UpdateTablesRequest {
  dingodb.pb.common.RequestInfo request_info = 1;
  TableDefinitionWithId table_definition_with_id = 2;
}

message UpdateTablesResponse {
  dingodb.pb.common.ResponseInfo response_info = 1;
  dingodb.pb.error.Error error = 2;
}

message AddIndexOnTableRequest {
  dingodb.pb.common.RequestInfo request_info = 1;
  DingoCommonId table_id = 2;                          // this is the table_id to add index
  TableDefinitionWithId table_definition_with_id = 3;  // this is the index to be added
}

message AddIndexOnTableResponse {
  dingodb.pb.common.ResponseInfo response_info = 1;
  dingodb.pb.error.Error error = 2;
}

message DropIndexOnTableRequest {
  dingodb.pb.common.RequestInfo request_info = 1;
  DingoCommonId table_id = 2;  // this is the table_id to drop index
  DingoCommonId index_id = 3;  // this is the index_id to be dropped
}

message DropIndexOnTableResponse {
  dingodb.pb.common.ResponseInfo response_info = 1;
  dingodb.pb.error.Error error = 2;
}

// get assigned table definition, including vector index and scalar index
message GetTablesRequest {
  dingodb.pb.common.RequestInfo request_info = 1;
  DingoCommonId table_id = 2;
}

message GetTablesResponse {
  dingodb.pb.common.ResponseInfo response_info = 1;
  dingodb.pb.error.Error error = 2;
  repeated TableDefinitionWithId table_definition_with_ids = 3;
  int64 revision = 4;
}

// drop table, vector index and scalar index
message DropTablesRequest {
  dingodb.pb.common.RequestInfo request_info = 1;
  repeated DingoCommonId table_ids = 2;
}

message DropTablesResponse {
  dingodb.pb.common.ResponseInfo response_info = 1;
  dingodb.pb.error.Error error = 2;
}

message SwitchAutoSplitRequest {
  dingodb.pb.common.RequestInfo request_info = 1;
  DingoCommonId table_id = 2;
  bool auto_split = 3;
}

message SwitchAutoSplitResponse {
  dingodb.pb.common.ResponseInfo response_info = 1;
  dingodb.pb.error.Error error = 2;
}

enum TsoOpType {
  OP_NONE = 0;
  OP_GEN_TSO = 1;         // Get new timestamp oracle
  OP_RESET_TSO = 2;       // Reset timestamp oracle
  OP_UPDATE_TSO = 3;      // Update timestamp oracle
  OP_QUERY_TSO_INFO = 4;  // Query timestamp oracle info
}

message TsoTimestamp {
  int64 physical = 1;
  int64 logical = 2;
}

message TsoRequest {
  dingodb.pb.common.RequestInfo request_info = 1;
  TsoOpType op_type = 2;
  int64 count = 3;
  TsoTimestamp current_timestamp = 4;
  int64 save_physical = 5;
  bool force = 6;
};

message TsoResponse {
  dingodb.pb.common.ResponseInfo response_info = 1;
  dingodb.pb.error.Error error = 2;
  TsoOpType op_type = 3;
  TsoTimestamp start_timestamp = 4;
  int64 count = 5;
  int64 save_physical = 6;
  int64 system_time = 7;
  string leader = 8;
};

message GetDeletedTableRequest {
  dingodb.pb.common.RequestInfo request_info = 1;
  DingoCommonId table_id = 2;
}

message GetDeletedTableResponse {
  dingodb.pb.common.ResponseInfo response_info = 1;
  dingodb.pb.error.Error error = 2;
  repeated TableDefinitionWithId table_definition_with_ids = 3;
}

message CleanDeletedTableRequest {
  dingodb.pb.common.RequestInfo request_info = 1;
  DingoCommonId table_id = 2;
}

message CleanDeletedTableResponse {
  dingodb.pb.common.ResponseInfo response_info = 1;
  dingodb.pb.error.Error error = 2;
}

message GetDeletedIndexRequest {
  dingodb.pb.common.RequestInfo request_info = 1;
  DingoCommonId index_id = 2;
}

message GetDeletedIndexResponse {
  dingodb.pb.common.ResponseInfo response_info = 1;
  dingodb.pb.error.Error error = 2;
  repeated TableDefinitionWithId table_definition_with_ids = 3;
}

message CleanDeletedIndexRequest {
  dingodb.pb.common.RequestInfo request_info = 1;
  DingoCommonId index_id = 2;
}

message CleanDeletedIndexResponse {
  dingodb.pb.common.ResponseInfo response_info = 1;
  dingodb.pb.error.Error error = 2;
}

message HelloRequest {
  dingodb.pb.common.RequestInfo request_info = 1;
  int64 hello = 2;
  bool get_memory_info = 3;
}

message HelloResponse {
  dingodb.pb.common.ResponseInfo response_info = 1;
  dingodb.pb.error.Error error = 2;
  dingodb.pb.coordinator.CoordinatorMemoryInfo memory_info = 3;
}

enum MetaEventType {
  META_EVENT_NONE = 0;

  // for schema
  META_EVENT_SCHEMA_CREATE = 1;
  META_EVENT_SCHEMA_UPDATE = 2;
  META_EVENT_SCHEMA_DELETE = 3;

  // for table, only for main table
  META_EVENT_TABLE_CREATE = 4;
  META_EVENT_TABLE_UPDATE = 5;
  META_EVENT_TABLE_DELETE = 6;

  // for index, both vector index and scalar index
  META_EVENT_INDEX_CREATE = 7;
  META_EVENT_INDEX_UPDATE = 8;
  META_EVENT_INDEX_DELETE = 9;

  // for tables with index
  META_EVENT_TABLE_INDEX_CREATE = 10;
  META_EVENT_TABLE_INDEX_UPDATE = 11;
  META_EVENT_TABLE_INDEX_DELETE = 12;

  // for region
  META_EVENT_REGION_CREATE = 13;
  META_EVENT_REGION_UPDATE = 14;
  META_EVENT_REGION_DELETE = 15;

  // for tenant
  META_EVENT_TENANT_CREATE = 16;
  META_EVENT_TENANT_UPDATE = 17;
  META_EVENT_TENANT_DELETE = 18;
}

message MetaEventTenant {
  int64 id = 1;
  string name = 2;
  string comment = 3;

  // the revision is the version of the schema
  int64 revision = 4;
}

message MetaEventSchema {
  int64 id = 1;
  string name = 2;

  // the revision is the version of the schema
  int64 revision = 3;
  int64 tenant_id = 4;
}

// the revision of table is inside the definition
message MetaEventTable {
  // table id, this the table_id of the table
  int64 id = 1;
  TableDefinition definition = 2;
  int64 schema_id = 3;

  // for a table, the parent_table_id is always 0, sdk could ignore this field
  int64 parent_table_id = 4;
}

// the revision of index is inside the definition
message MetaEventIndex {
  // index id, this the index_id of the index
  int64 id = 1;
  TableDefinition definition = 2;
  int64 schema_id = 3;

  // if the index is belongs to a table ,the parent_table_id is the table_id of the parent table.
  // if this field is zero, the index should be create by create index, such as c++ sdk or python sdk.
  int64 parent_table_id = 4;
}

// the revision of table_index is the version of the table_index
message MetaEventTableIndex {
  // table_index id, this the table_id of the table_index
  int64 id = 1;

  // the table_ids is the indexes of this table_index
  repeated DingoCommonId table_ids = 2;
  int64 revision = 3;
}

// the revision of region is inside the definition
// if the region's epoch is changed, such as split/merge, the will be a region update event.
// the sdk should check if the region's version is changed, and check if the revision in the definition newer than the
// old one in the sdk's cache. if region's epoch change, the region's range may change, the sdk should update the range
// distribution.
message MetaEventRegion {
  // region id
  int64 id = 1;
  // region conf version & version
  int64 epoch = 2;
  // region type
  dingodb.pb.common.RegionType region_type = 3;
  // region definition
  dingodb.pb.common.RegionDefinition definition = 4;

  dingodb.pb.common.RegionState state = 10;

  // timestamp
  int64 create_timestamp = 20;
  int64 deleted_timestamp = 21;
}

message MetaEvent {
  MetaEventType event_type = 1;
  oneof event {
    MetaEventSchema schema = 2;
    MetaEventTable table = 3;
    MetaEventIndex index = 4;
    MetaEventTableIndex table_index = 5;
    MetaEventRegion region = 6;
    MetaEventTenant tenant = 7;
  }
}

message WatchRequest {
  dingodb.pb.common.RequestInfo request_info = 1;
  // request_union is a request to either create a new watcher or cancel an existing watcher.
  oneof request_union {
    WatchCreateRequest create_request = 2;
    WatchCancelRequest cancel_request = 3;
    WatchProgressRequest progress_request = 4;
  }
}

message WatchCreateRequest {
  // start_revision is an optional revision to watch from (inclusive).
  // if start_revision is 0, means watch from "now".
  // if start_revision > 0, means watch from start_revision.
  // if the caller setup the start_revision, the create may be failed if the start_revision is compacted.
  // caller need to check the compact_revision in the response.
  int64 start_revision = 1;

  // the event_types than client want to get from coordinator
  repeated MetaEventType event_types = 2;

  // If watch_id is provided and non-zero, it will be assigned to this watcher.
  // For Executor, this field can be set to 0 to let coordinator assign a new ID.
  // Since creating a watcher in coordinator is not a synchronous operation,
  // this can be used ensure that ordering is correct when creating multiple
  // watchers on the same stream. Creating a watcher with an ID already in
  // use on the stream will cause an error to be returned.
  int64 watch_id = 7;
}

message WatchCancelRequest {
  // watch_id is the watcher id to cancel so that no more events are transmitted.
  int64 watch_id = 1;
}

// Requests the a watch stream progress status be sent in the watch response stream as soon as
// possible.
message WatchProgressRequest {
  // the watch_id is the watcher id to request progress for.
  int64 watch_id = 1;
}

message WatchResponse {
  dingodb.pb.common.ResponseInfo response_info = 1;
  dingodb.pb.error.Error error = 2;
  // watch_id is the ID of the watcher that corresponds to the response.
  int64 watch_id = 4;

  // created is set to true if the response is for a create watch request.
  // The client should record the watch_id and expect to receive events for
  // the created watcher from the same stream.
  // All events sent to the created watcher will attach with the same watch_id.
  bool created = 5;

  // canceled is set to true if the response is for a cancel watch request.
  // No further events will be sent to the canceled watcher.
  bool canceled = 6;

  // compact_revision is set to the minimum index if a watcher tries to watch
  // at a compacted index.
  //
  // This happens when creating a watcher at a compacted revision or the watcher cannot
  // catch up with the progress of the key-value store.
  //
  // The client should treat the watcher as canceled and should not try to create any
  // watcher with the same start_revision again.
  int64 compact_revision = 7;

  // cancel_reason indicates the reason for canceling the watcher.
  string cancel_reason = 8;

  // the events may be empty or more than one, the client should handle the events
  // if the events is empty, this means the response may be a probe response
  // client can ignore the response if the events is empty, and continue to progress watch until
  // the watch_id is canceled ( EWATCH_NOT_EXIST will be returned if the watch_id is canceled)
  repeated MetaEvent events = 11;
}

message ListWatchRequest {
  dingodb.pb.common.RequestInfo request_info = 1;
  int64 watch_id = 2;
}

message WatchNode {
  int64 watch_id = 3;
  int64 start_revision = 4;    // the start revision of this watch_id want to watch
  int64 watched_revision = 5;  // the last revision than coordinator pushed back to this watch_id
  int64 is_watching = 6;       // the count that how many client is watching this watch_id
  repeated MetaEventType event_types = 7;
  repeated MetaEvent pending_events = 8;  // the pending events that coordinator want to push to this watch_id
  int64 last_send_timestamp_ms = 9;       // the last send timestamp in ms
}

message ListWatchResponse {
  dingodb.pb.common.ResponseInfo response_info = 1;
  dingodb.pb.error.Error error = 2;
  repeated WatchNode watch_nodes = 3;
}

// Tenant
message CreateTenantRequest {
  dingodb.pb.common.RequestInfo request_info = 1;
  Tenant tenant = 2;
}

message CreateTenantResponse {
  dingodb.pb.common.ResponseInfo response_info = 1;
  dingodb.pb.error.Error error = 2;
  Tenant tenant = 3;
}

message UpdateTenantRequest {
  dingodb.pb.common.RequestInfo request_info = 1;
  Tenant tenant = 2;
}

message UpdateTenantResponse {
  dingodb.pb.common.ResponseInfo response_info = 1;
  dingodb.pb.error.Error error = 2;
  Tenant tenant = 3;
}

message DropTenantRequest {
  dingodb.pb.common.RequestInfo request_info = 1;
  int64 tenant_id = 2;
}

message DropTenantResponse {
  dingodb.pb.common.ResponseInfo response_info = 1;
  dingodb.pb.error.Error error = 2;
}

message GetTenantsRequest {
  dingodb.pb.common.RequestInfo request_info = 1;
  repeated int64 tenant_ids = 2;
}

message GetTenantsResponse {
  dingodb.pb.common.ResponseInfo response_info = 1;
  dingodb.pb.error.Error error = 2;
  repeated Tenant tenants = 3;
}

service MetaService {
  // Hello, this is for auto_increment
  rpc Hello(HelloRequest) returns (HelloResponse);
  rpc GetMemoryInfo(HelloRequest) returns (HelloResponse);
  rpc GetTsoInfo(TsoRequest) returns (TsoResponse);

  // GetSchemas
  // in: schema_id
  // out: List<Schema>
  rpc GetSchemas(GetSchemasRequest) returns (GetSchemasResponse);

  // GetSchema
  // in: schema_id
  // out: Schema
  rpc GetSchema(GetSchemaRequest) returns (GetSchemaResponse);

  // GetSchemaByName
  // in: schema_name
  // out: Schema
  rpc GetSchemaByName(GetSchemaByNameRequest) returns (GetSchemaByNameResponse);

  // GetTablesBySchema
  // in: schema_id
  // out: List<TableDefinitionWithId>
  rpc GetTablesBySchema(GetTablesBySchemaRequest) returns (GetTablesBySchemaResponse);

  // GetTablesCount
  // in: schema_id
  // out: tables_count
  rpc GetTablesCount(GetTablesCountRequest) returns (GetTablesCountResponse);

  // GetTable
  // in: table_id
  // out: TableDefinitionWithId
  rpc GetTable(GetTableRequest) returns (GetTableResponse);

  // GetTableByName
  // in: table_id
  // out: TableDefinitionWithId
  rpc GetTableByName(GetTableByNameRequest) returns (GetTableByNameResponse);

  // GetTableRange
  // in: table_id
  // out: TableRange
  rpc GetTableRange(GetTableRangeRequest) returns (GetTableRangeResponse);

  // GetTableMetrics
  // in: table_id
  // out: table_metrics
  rpc GetTableMetrics(GetTableMetricsRequest) returns (GetTableMetricsResponse);

  // CreateTableId
  // in: schema_id
  // out: table_id
  rpc CreateTableId(CreateTableIdRequest) returns (CreateTableIdResponse);
  rpc CreateTableIds(CreateTableIdsRequest) returns (CreateTableIdsResponse);

  // CreateTable
  // in: schema_id table_id TableDefinition
  //      if table_id is specified, use given table_id, else create new table_id
  // out: table_id
  rpc CreateTable(CreateTableRequest) returns (CreateTableResponse);

  // DropTable
  // in: schema_id table_id
  // out: {}
  rpc DropTable(DropTableRequest) returns (DropTableResponse);

  // GenerateTableIds
  // in: schema_id count
  // out: List<DingoCommonId>
  rpc GenerateTableIds(GenerateTableIdsRequest) returns (GenerateTableIdsResponse);

  // CreateTables
  // in: schema_id List<TableDefinitionWithId>
  // out: List<DingoCommonId>
  rpc CreateTables(CreateTablesRequest) returns (CreateTablesResponse);

  // UpdateTables
  // in: schema_id List<TableDefinitionWithId>
  rpc UpdateTables(UpdateTablesRequest) returns (UpdateTablesResponse);

  rpc AddIndexOnTable(AddIndexOnTableRequest) returns (AddIndexOnTableResponse);
  rpc DropIndexOnTable(DropIndexOnTableRequest) returns (DropIndexOnTableResponse);

  // GetTables
  // in: schema_id table_id
  // out: List<DingoCommonId>
  rpc GetTables(GetTablesRequest) returns (GetTablesResponse);

  // DropTables
  // in: table_id
  // out: {}
  rpc DropTables(DropTablesRequest) returns (DropTablesResponse);

  // GetIndexes
  // in: schema_id
  // out: List<IndexDefinitionWithId>
  rpc GetIndexes(GetIndexesRequest) returns (GetIndexesResponse);

  // GetIndexesCount
  // in: schema_id
  // out: tables_count
  rpc GetIndexesCount(GetIndexesCountRequest) returns (GetIndexesCountResponse);

  // GetIndex
  // in: table_id
  // out: IndexDefinitionWithId
  rpc GetIndex(GetIndexRequest) returns (GetIndexResponse);

  // GetIndexByName
  // in: table_id
  // out: IndexDefinitionWithId
  rpc GetIndexByName(GetIndexByNameRequest) returns (GetIndexByNameResponse);

  // GetIndexRange
  // in: table_id
  // out: IndexRange
  rpc GetIndexRange(GetIndexRangeRequest) returns (GetIndexRangeResponse);

  // GetIndexMetrics
  // in: table_id
  // out: table_metrics
  rpc GetIndexMetrics(GetIndexMetricsRequest) returns (GetIndexMetricsResponse);

  // CreateIndexId
  // in: schema_id
  // out: index_id
  rpc CreateIndexId(CreateIndexIdRequest) returns (CreateIndexIdResponse);

  // CreateIndex
  // in: schema_id index_id IndexDefinition
  //      if index_id is specified, use given index_id, else create new index_id
  // out: index_id
  rpc CreateIndex(CreateIndexRequest) returns (CreateIndexResponse);

  // UpdateIndex
  // in: index_id IndexDefinition
  // out: {}
  rpc UpdateIndex(UpdateIndexRequest) returns (UpdateIndexResponse);

  // DropIndex
  // in: schema_id table_id
  // out: {}
  rpc DropIndex(DropIndexRequest) returns (DropIndexResponse);

  // CreateSchema
  // in: parent_schema_id schema_name
  // out: Schema
  rpc CreateSchema(CreateSchemaRequest) returns (CreateSchemaResponse);

  // DropSchema
  // in: parent_schema_id schema_name
  // out: Schema
  rpc DropSchema(DropSchemaRequest) returns (DropSchemaResponse);

  // GetAutoIncrements
  // out: list of table_id, start_id
  rpc GetAutoIncrements(GetAutoIncrementsRequest) returns (GetAutoIncrementsResponse);

  // GetAutoIncrement
  // in: table_id
  // out: start_id
  rpc GetAutoIncrement(GetAutoIncrementRequest) returns (GetAutoIncrementResponse);

  // CreateAutoIncrement
  // in: table_id start_id
  // out: error code
  rpc CreateAutoIncrement(CreateAutoIncrementRequest) returns (CreateAutoIncrementResponse);

  // UpdateAutoIncrement
  // in: table_id start_id force
  // out: error code
  rpc UpdateAutoIncrement(UpdateAutoIncrementRequest) returns (UpdateAutoIncrementResponse);

  // GenerateAutoIncrement
  // in: table_id count auto_increment_increment auto_increment_offset
  // out: start_id, end_id
  rpc GenerateAutoIncrement(GenerateAutoIncrementRequest) returns (GenerateAutoIncrementResponse);

  // DeleteAutoIncrement
  // in: table_id
  // out: error code
  rpc DeleteAutoIncrement(DeleteAutoIncrementRequest) returns (DeleteAutoIncrementResponse);

  // SwitchAutoSplit for table/index
  rpc SwitchAutoSplit(SwitchAutoSplitRequest) returns (SwitchAutoSplitResponse);

  // Timestamp Oracle
  // TsoService
  rpc TsoService(TsoRequest) returns (TsoResponse);

  // DeletedTable
  rpc GetDeletedTable(GetDeletedTableRequest) returns (GetDeletedTableResponse);
  rpc CleanDeletedTable(CleanDeletedTableRequest) returns (CleanDeletedTableResponse);

  // DeletedIndex
  rpc GetDeletedIndex(GetDeletedIndexRequest) returns (GetDeletedIndexResponse);
  rpc CleanDeletedIndex(CleanDeletedIndexRequest) returns (CleanDeletedIndexResponse);

  // Watch watches for events happening or that have happened.
  // client need to do loop rpc calls for continuous watch until it encounters an error.
  rpc Watch(WatchRequest) returns (WatchResponse) {}

  // List all or one of the watch node info
  rpc ListWatch(ListWatchRequest) returns (ListWatchResponse) {}

  // Operation about Metrics

  // Tenant
  // CreateTenant
  // in: parent_schema_id schema_name
  // out: Tenant
  rpc CreateTenant(CreateTenantRequest) returns (CreateTenantResponse);

  // DropTenant
  // in: parent_schema_id schema_name
  // out: Tenant
  rpc DropTenant(DropTenantRequest) returns (DropTenantResponse);

  // UpdateTenant
  // in: id name comment
  // out: Tenant
  rpc UpdateTenant(UpdateTenantRequest) returns (UpdateTenantResponse);

  // GetTenants
  // out: List<Tenant>
  rpc GetTenants(GetTenantsRequest) returns (GetTenantsResponse);
}
