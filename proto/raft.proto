// Copyright (c) 2023 dingodb.com, Inc. All Rights Reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "common.proto";
import "coordinator_internal.proto";

package dingodb.pb.raft;

option java_package = "io.dingodb.raft";
option cc_generic_services = true;

enum CmdType {
  NONE = 0;
  PUT = 1;
  PUTIFABSENT = 2;
  DELETERANGE = 3;
  DELETEBATCH = 4;
  SPLIT = 5;

  // Coordinator State Machine Operator
  META_WRITE = 2000;
}

message PutRequest {
  string cf_name = 1;
  repeated dingodb.pb.common.KeyValue kvs = 2;
}

message PutResponse {}

message PutIfAbsentRequest {
  string cf_name = 1;
  repeated dingodb.pb.common.KeyValue kvs = 2;
  bool is_atomic = 3;
}

message PutIfAbsentResponse {
  repeated bytes put_keys = 1;
}

message DeleteRangeRequest {
  string cf_name = 1;
  repeated dingodb.pb.common.Range ranges = 2;
}

message DeleteRangeResponse {
  repeated uint64 delete_counts = 1;
}

message DeleteBatchRequest {
  string cf_name = 1;
  repeated bytes keys = 2;
}

message DeleteBatchResponse {}

message SplitRequest {
  uint64 from_region_id = 1;  // split from region id
  uint64 to_region_id = 2;    // split to region id
  bytes split_key = 3;        // split watershed key
}

message SplitResponse {}

message RaftCreateSchemaRequest {}
message RaftCreateSchemaResponse {}

message RaftCreateTableRequest {}
message RaftCreateTableResponse {}

message RaftMetaRequest {
  dingodb.pb.coordinator_internal.MetaIncrement meta_increment = 1;
}

message Request {
  CmdType cmd_type = 1;
  oneof cmd_body {
    // Store Operation[1000, 2000]
    PutRequest put = 1000;
    PutIfAbsentRequest put_if_absent = 1001;
    DeleteRangeRequest delete_range = 1002;
    DeleteBatchRequest delete_batch = 1003;
    SplitRequest split = 1004;

    // Coordinator Operation[2000, 3000]
    RaftMetaRequest meta_req = 2000;
  }
}

message Response {
  CmdType cmd_type = 1;

  oneof cmd_body {
    PutResponse put = 1000;
    PutIfAbsentResponse put_if_absent = 1001;
    DeleteRangeResponse delete_range = 1002;
    DeleteBatchResponse delete_batch = 1003;
    SplitResponse split = 1004;

    RaftCreateSchemaResponse create_schema_req = 2001;
    RaftCreateTableResponse create_table_req = 2002;
  }
}

message RequestHeader {
  uint64 region_id = 1;
}

message RaftCmdRequest {
  RequestHeader header = 1;
  repeated Request requests = 2;
}

message ResponseHeader {}

message RaftCmdResponse {
  ResponseHeader header = 1;
  repeated Response responses = 2;
}
