syntax = "proto3";

import "error.proto";
import "common.proto";

package dingodb.pb.version;

option java_package = "io.dingodb.version";
option cc_generic_services = true;

// version service
enum VersionType {
  TABLE = 0;
}

message VersionId {
  VersionType type = 1;
  uint64 id = 2;
}

message GetCurrVersionRequest {
  VersionId verId = 1;
}

message GetCurrVersionResponse {
  dingodb.pb.error.Error error = 1;
  uint64 version = 2;
}

message GetNewVersionRequest {
  VersionId verId = 1;
  uint64 version = 2;
}

message GetNewVersionResponse {
  dingodb.pb.error.Error error = 1;
  uint64 version = 2;
}

// kv
message Kv {
  dingodb.pb.common.KeyValue kv = 1;
  int64 create_revision = 2;
  int64 mod_revision = 3;
  int64 version = 4;
  uint64 lease = 6;
}

message Event {
  enum EventType {
    NONE = 0;
    PUT = 1;
    DELETE = 2;
    NOT_EXISTS = 3;  // this key is never created
  }
  EventType type = 1;
  Kv kv = 2;
  Kv prev_kv = 3;
}

message ResponseHeader {
  // cluster_id is the ID of the cluster which sent the response.
  uint64 cluster_id = 1;  // NOT IMPLEMENTED
  // coordinator_id is the ID of the coordinator which sent the response.
  uint64 coordinator_id = 2;  // NOT IMPLEMENTED
  // revision is the key-value store revision when the request was applied, and it's
  // unset (so 0) in case of calls not interacting with key-value store.
  // For watch progress responses, the header.revision indicates progress. All future events
  // received in this stream are guaranteed to have a higher revision number than the
  // header.revision number.
  int64 revision = 3;
  // raft_term is the raft term when the request was applied.
  uint64 raft_term = 4;  // NOT IMPLEMENTED
}

message RangeRequest {
  // key is the first key for the range. If range_end is not given, the request only looks up key.
  bytes key = 1;
  // range_end is the upper bound on the requested range [key, range_end).
  // If range_end is '\0', the range is all keys >= key.
  // If range_end is key plus one (e.g., "aa"+1 == "ab", "a\xff"+1 == "b"),
  // then the range request gets all keys prefixed with key.
  // If both key and range_end are '\0', then the range request returns all keys.
  bytes range_end = 2;
  // limit is a limit on the number of keys returned for the request. When limit is set to 0,
  // it is treated as no limit.
  int64 limit = 3;
  // revision is the point-in-time of the key-value store to use for the range.
  // If revision is less or equal to zero, the range is over the newest key-value store.
  // If the revision has been compacted, ErrCompacted is returned as a response.
  int64 revision = 4;  // NOT IMPLEMENTED

  // serializable sets the range request to use serializable member-local reads.
  // Range requests are linearizable by default; linearizable requests have higher
  // latency and lower throughput than serializable requests but reflect the current
  // consensus of the cluster. For better performance, in exchange for possible stale reads,
  // a serializable range request is served locally without needing to reach consensus
  // with other nodes in the cluster.
  bool serializable = 7;  // NOT IMPLEMENTED

  // keys_only when set returns only the keys and not the values.
  bool keys_only = 8;

  // count_only when set returns only the count of the keys in the range.
  bool count_only = 9;

  // min_mod_revision is the lower bound for returned key mod revisions; all keys with
  // lesser mod revisions will be filtered away.
  int64 min_mod_revision = 10;  // NOT IMPLEMENTED

  // max_mod_revision is the upper bound for returned key mod revisions; all keys with
  // greater mod revisions will be filtered away.
  int64 max_mod_revision = 11;  // NOT IMPLEMENTED

  // min_create_revision is the lower bound for returned key create revisions; all keys with
  // lesser create revisions will be filtered away.
  int64 min_create_revision = 12;  // NOT IMPLEMENTED

  // max_create_revision is the upper bound for returned key create revisions; all keys with
  // greater create revisions will be filtered away.
  int64 max_create_revision = 13;  // NOT IMPLEMENTED
}

message RangeResponse {
  dingodb.pb.error.Error error = 1;
  ResponseHeader header = 2;
  // kvs is the list of key-value pairs matched by the range request.
  // kvs is empty when count is requested.
  repeated Kv kvs = 3;
  // more indicates if there are more keys to return in the requested range.
  bool more = 4;
  // count is set to the number of keys within the range when requested.
  int64 count = 5;
}

message PutRequest {
  // key_value is the key and value, to put into the key-value store.
  dingodb.pb.common.KeyValue key_value = 1;

  // lease is the lease ID to associate with the key in the key-value store. A lease
  // value of 0 indicates no lease.
  uint64 lease = 2;

  // If need_prev_kv is set, gets the previous key-value pair before changing it.
  // The previous key-value pair will be returned in the put response.
  bool need_prev_kv = 3;

  // If ignore_value is set, updates the key using its current value.
  // Returns an error if the key does not exist.
  bool ignore_value = 4;

  // If ignore_lease is set, updates the key using its current lease.
  // Returns an error if the key does not exist.
  bool ignore_lease = 5;
}

message PutResponse {
  dingodb.pb.error.Error error = 1;
  ResponseHeader header = 2;
  // if prev_kv is set in the request, the previous key-value pair will be returned.
  Kv prev_kv = 3;
}

message DeleteRangeRequest {
  // key is the first key to delete in the range.
  bytes key = 1;
  // range_end is the key following the last key to delete for the range [key, range_end).
  // If range_end is not given, the range is defined to contain only the key argument.
  // If range_end is one bit larger than the given key, then the range is all the keys
  // with the prefix (the given key).
  // If range_end is '\0', the range is all keys greater than or equal to the key argument.
  bytes range_end = 2;

  // If need_prev_kv is set, gets the previous key-value pairs before deleting it.
  // The previous key-value pairs will be returned in the delete response.
  bool need_prev_kv = 3;
}

message DeleteRangeResponse {
  dingodb.pb.error.Error error = 1;
  ResponseHeader header = 2;
  // deleted is the number of keys deleted by the delete range request.
  int64 deleted = 3;
  // if prev_kv is set in the request, the previous key-value pairs will be returned.
  repeated Kv prev_kvs = 4;
}

message CompactionRequest {
  // key is the first key to compact in the range.
  bytes key = 1;
  // range_end is the key following the last key to compact for the range [key, range_end).
  // If range_end is not given, the range is defined to contain only the key argument.
  // If range_end is one bit larger than the given key, then the range is all the keys
  // with the prefix (the given key).
  // If range_end is '\0', the range is all keys greater than or equal to the key argument.
  bytes range_end = 2;

  // the revision smaller than compact_revision will be compacted
  uint64 compact_revision = 3;
}

message CompactionResponse {
  dingodb.pb.error.Error error = 1;
  ResponseHeader header = 2;
  int64 compaction_count = 3;
}

// lease
message LeaseGrantRequest {
  // TTL is the advisory time-to-live in seconds. Expired lease will return -1.
  int64 TTL = 1;
  // ID is the requested ID for the lease. If ID is set to 0, the lessor chooses an ID.
  uint64 ID = 2;
}

message LeaseGrantResponse {
  dingodb.pb.error.Error error = 1;
  ResponseHeader header = 2;
  // ID is the lease ID for the granted lease.
  uint64 ID = 3;
  // TTL is the server chosen lease time-to-live in seconds.
  int64 TTL = 4;
}

message LeaseRevokeRequest {
  // ID is the lease ID to revoke. When the ID is revoked, all associated keys will be deleted.
  uint64 ID = 1;
}

message LeaseRevokeResponse {
  dingodb.pb.error.Error error = 1;
  ResponseHeader header = 2;
}

message LeaseRenewRequest {
  // ID is the lease ID for the lease to keep alive.
  uint64 ID = 1;
}

message LeaseRenewResponse {
  dingodb.pb.error.Error error = 1;
  ResponseHeader header = 2;
  // ID is the lease ID from the keep alive request.
  uint64 ID = 3;
  // TTL is the new time-to-live for the lease.
  int64 TTL = 4;
}

message LeaseQueryRequest {
  // ID is the lease ID for the lease.
  uint64 ID = 1;
  // keys is true to query all the keys attached to this lease.
  bool keys = 2;
}

message LeaseQueryResponse {
  dingodb.pb.error.Error error = 1;
  ResponseHeader header = 2;
  // ID is the lease ID from the keep alive request.
  uint64 ID = 3;
  // TTL is the remaining TTL in seconds for the lease; the lease will expire in under TTL+1 seconds.
  int64 TTL = 4;
  // GrantedTTL is the initial granted time in seconds upon lease creation/renewal.
  int64 grantedTTL = 5;
  // Keys is the list of keys attached to this lease.
  repeated bytes keys = 6;
}

message ListLeasesRequest {}

message LeaseStatus {
  uint64 ID = 1;
}

message ListLeasesResponse {
  dingodb.pb.error.Error error = 1;
  ResponseHeader header = 2;
  repeated LeaseStatus leases = 3;
}

// watch
message WatchRequest {
  // request_union is a request to either create a new watcher or cancel an existing watcher.
  oneof request_union {
    WatchCreateRequest create_request = 1;      // NOT IMPLEMENTED
    WatchCancelRequest cancel_request = 2;      // NOT IMPLEMENTED
    WatchProgressRequest progress_request = 3;  // NOT IMPLEMENTED
    OneTimeWatchRequest one_time_request =
        4;  // This is a one time watch request, only support watch a single key, not support range_end
  }
}

enum EventFilterType {
  // filter out put event.
  NOPUT = 0;
  // filter out delete event.
  NODELETE = 1;
}

message OneTimeWatchRequest {
  // key is the key to register for watching.
  bytes key = 1;

  // this field is not used, maybe we can use it to watch a range in the future
  // bytes range_end = 2;

  // start_revision is an optional revision to watch from (inclusive). No start_revision is "now".
  // if start_revision == 0, watch from now on;
  // if start_revision > 0, watch from the min(start_revision, current_revision)
  uint64 start_revision = 3;

  // filters filter the events at server side before it sends back to the watcher.
  repeated EventFilterType filters = 4;

  // If prev_kv is set, created watcher gets the previous KV before the event happens.
  // If the previous KV is already compacted, nothing will be returned.
  bool need_prev_kv = 5;

  // if the key is not exists, wait_on_not_exists_key is true, the watch will wait until the key is exists
  // if wait_on_not_exist_key is false, and the key is not exists, the watch will return immediately
  bool wait_on_not_exist_key = 6;
}

message WatchCreateRequest {
  // key is the key to register for watching.
  bytes key = 1;

  // range_end is the end of the range [key, range_end) to watch. If range_end is not given,
  // only the key argument is watched. If range_end is equal to '\0', all keys greater than
  // or equal to the key argument are watched.
  // If the range_end is one bit larger than the given key,
  // then all keys with the prefix (the given key) will be watched.
  bytes range_end = 2;

  // start_revision is an optional revision to watch from (inclusive). No start_revision is "now".
  int64 start_revision = 3;

  // progress_notify is set so that the coordinator server will periodically send a WatchResponse with
  // no events to the new watcher if there are no recent events. It is useful when clients
  // wish to recover a disconnected watcher starting from a recent known revision.
  // The coordinator server may decide how often it will send notifications based on current load.
  bool progress_notify = 4;

  // filters filter the events at server side before it sends back to the watcher.
  repeated EventFilterType filters = 5;

  // If prev_kv is set, created watcher gets the previous KV before the event happens.
  // If the previous KV is already compacted, nothing will be returned.
  bool need_prev_kv = 6;

  // If watch_id is provided and non-zero, it will be assigned to this watcher.
  // Since creating a watcher in coordinator is not a synchronous operation,
  // this can be used ensure that ordering is correct when creating multiple
  // watchers on the same stream. Creating a watcher with an ID already in
  // use on the stream will cause an error to be returned.
  int64 watch_id = 7;

  // fragment enables splitting large revisions into multiple watch responses.
  bool fragment = 8;
}

message WatchCancelRequest {
  // watch_id is the watcher id to cancel so that no more events are transmitted.
  int64 watch_id = 1;
}

// Requests the a watch stream progress status be sent in the watch response stream as soon as
// possible.
message WatchProgressRequest {}

message WatchResponse {
  dingodb.pb.error.Error error = 1;
  ResponseHeader header = 2;
  // watch_id is the ID of the watcher that corresponds to the response.
  int64 watch_id = 3;  // NOT IMPLEMENTED

  // created is set to true if the response is for a create watch request.
  // The client should record the watch_id and expect to receive events for
  // the created watcher from the same stream.
  // All events sent to the created watcher will attach with the same watch_id.
  bool created = 4;  // NOT IMPLEMENTED

  // canceled is set to true if the response is for a cancel watch request.
  // No further events will be sent to the canceled watcher.
  bool canceled = 5;  // NOT IMPLEMENTED

  // compact_revision is set to the minimum index if a watcher tries to watch
  // at a compacted index.
  //
  // This happens when creating a watcher at a compacted revision or the watcher cannot
  // catch up with the progress of the key-value store.
  //
  // The client should treat the watcher as canceled and should not try to create any
  // watcher with the same start_revision again.
  int64 compact_revision = 6;  // NOT IMPLEMENTED

  // cancel_reason indicates the reason for canceling the watcher.
  string cancel_reason = 7;  // NOT IMPLEMENTED

  // framgment is true if large watch response was split over multiple responses.
  bool fragment = 8;  // NOT IMPLEMENTED

  repeated Event events = 11;
}

message GetRawKvIndexRequest {
  bytes key = 1;
}

message KvIndexInternal {
  message Generation {
    uint64 verison = 1;                       // if verison == 0, means this is a empty generation
    RevisionInternal create_revision = 2;     // the create revision of this generation
    repeated RevisionInternal revisions = 3;  // the revisions of this generation
  }

  bytes id = 1;  // id is the key of the keyIndex.
  RevisionInternal mod_revision = 2;
  repeated Generation generations = 3;
}

message GetRawKvIndexResponse {
  dingodb.pb.error.Error error = 1;
  ResponseHeader header = 2;
  KvIndexInternal kvIndex = 3;
}

message RevisionInternal {
  uint64 main = 1;
  uint64 sub = 2;
}

message KvInternal {
  bytes id = 1;  // id is the key of the keyIndex.
  bytes value = 2;
  RevisionInternal create_revision = 3;
  RevisionInternal mod_revision = 4;
  uint64 version = 5;
  uint64 lease = 6;
  bool is_deleted = 7;  // for delete operation, we set is_deleted to true, and set value to empty
}

message KvRevInternal {
  bytes id = 1;  // id is the key of the KvRev, it's encode from RevisionInternal
  KvInternal kv = 2;
}

message GetRawKvRevRequest {
  RevisionInternal revision = 1;
}

message GetRawKvRevResponse {
  dingodb.pb.error.Error error = 1;
  ResponseHeader header = 2;
  KvRevInternal kvRev = 3;
}

service VersionService {
  rpc GetCurrVersion(GetCurrVersionRequest) returns (GetCurrVersionResponse) {}

  rpc GetNewVersion(GetNewVersionRequest) returns (GetNewVersionResponse) {}

  // Range is Get and MultiGet
  rpc KvRange(RangeRequest) returns (RangeResponse) {}

  // Put is Upsert
  rpc KvPut(PutRequest) returns (PutResponse) {}

  // DeleteRange is Delete and MultiDelete
  rpc KvDeleteRange(DeleteRangeRequest) returns (DeleteRangeResponse) {}

  // KvCompaction is compaction kv with compaction_revision
  rpc KvCompaction(CompactionRequest) returns (CompactionResponse) {}

  // LeaseGrant creates a lease which expires if the server does not receive a keepAlive
  // within a given time to live period. All keys attached to the lease will be expired and
  // deleted if the lease expires. Each expired key generates a delete event in the event history.
  rpc LeaseGrant(LeaseGrantRequest) returns (LeaseGrantResponse) {}

  // LeaseRevoke revokes a lease. All keys attached to the lease will expire and be deleted.
  rpc LeaseRevoke(LeaseRevokeRequest) returns (LeaseRevokeResponse) {}

  // LeaseRenew keeps the lease alive by streaming keep alive requests from the client
  // to the server and streaming keep alive responses from the server to the client.
  rpc LeaseRenew(LeaseRenewRequest) returns (LeaseRenewResponse) {}

  // LeaseQuery retrieves lease information.
  rpc LeaseQuery(LeaseQueryRequest) returns (LeaseQueryResponse) {}

  // ListLeases lists all existing leases.
  rpc ListLeases(ListLeasesRequest) returns (ListLeasesResponse) {}

  // Watch watches for events happening or that have happened.
  // client need to do loop rpc calls for continuous watch until it encounters an error.
  rpc Watch(WatchRequest) returns (WatchResponse) {}

  rpc GetRawKvIndex(GetRawKvIndexRequest) returns (GetRawKvIndexResponse) {}
  rpc GetRawKvRev(GetRawKvRevRequest) returns (GetRawKvRevResponse) {}
}
